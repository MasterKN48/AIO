{"version":3,"sources":["component/Document.js","component/Algorithms/docs/HtmlToPdf.js"],"names":["Document","useState","fr","to","load","setLoading","success","setSuccess","file","setFile","from","type","setType","fileType","e","target","name","value","className","onChange","defaultValue","map","i","k","key","style","color","accept","files","max","onClick","preventDefault","size","console","log","alert","setTimeout","reader","FileReader","readAsText","onloadend","doc","jsPDF","setFontType","setFontSize","text","result","save","HtmlToPdf"],"mappings":"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","file":"static/js/8.47118ae5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { HtmlToPdf } from \"./Algorithms/docs/HtmlToPdf\";\nconst Document = () => {\n  // eslint-disable-next-line\n  const [fr, setFr] = useState([\"DOCX\", \"PPT\", \"TXT\", \"HTML\", \"CSV\"]); // eslint-disable-next-line\n  const [to, setTo] = useState([\"PDF\"]);\n  const [load, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [file, setFile] = useState(null);\n  const [type, setType] = useState({\n    from: \"\",\n    to: \"\"\n  });\n  const showName = e => {\n    setFile(e.target.files[0]);\n  };\n  const fileType = e => {\n    //console.log(e.target.value);\n    setType({\n      ...type,\n      [e.target.name]: e.target.value\n    });\n  };\n  const submit = e => {\n    e.preventDefault();\n    if (file === null) {\n      alert(\"Please first select file and types\");\n      return;\n    }\n    if (file.size > 112582912) {\n      alert(\"File Size must be less then 11mb.\");\n      return;\n    }\n    if (type.from === \"\") {\n      console.log(type);\n      alert(\"'From' file type is not selected!\");\n      return;\n    }\n    if (type.to === \"\") {\n      alert(\"'To' file type is not selected\");\n      return;\n    }\n    if (type.from === \"DOCX\") {\n      console.log(\"object\");\n    }\n    if (type.from === \"HTML\") {\n      console.log(\"object\");\n    }\n    setSuccess(false);\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      setSuccess(true);\n      console.log(file);\n    }, 5000);\n  };\n  const download = () => {\n    if (type.from === \"HTML\") {\n      HtmlToPdf(file);\n    }\n  };\n  return (\n    <section className=\"container\">\n      <div className=\"level\">\n        <div className=\"level-left\">\n          <div className=\"level-item\">\n            <p className=\"subtitle is-5\">\n              <strong>From</strong>\n            </p>\n          </div>\n          <div className=\"level-item\">\n            <div className=\"field\">\n              <div className=\"control has-icons-left\">\n                <div className=\"select is-rounded\">\n                  <select name=\"from\" onChange={fileType}>\n                    <option defaultValue>Original File Types</option>\n                    {fr.map((i, k) => {\n                      return <option key={k}>{i}</option>;\n                    })}\n                  </select>\n                </div>\n                <div className=\"icon is-small is-left\">\n                  <i className=\"fas fa-globe\"></i>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"level-right\">\n          <div className=\"level-item\">\n            <p className=\"subtitle is-5\">\n              <strong>To</strong>\n            </p>\n          </div>\n          <div className=\"field shift\">\n            <div className=\"control has-icons-left\">\n              <div className=\"select is-rounded\">\n                <select name=\"to\" onChange={fileType}>\n                  <option defaultValue>New File Types</option>\n                  {to.map((i, k) => {\n                    return <option key={k}>{i}</option>;\n                  })}\n                </select>\n              </div>\n              <div className=\"icon is-small is-left\">\n                <i className=\"fas fa-globe\"></i>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <p style={{ color: \"red\" }}>\n        *Under Construction: Algorithms for Document file conversion*\n      </p>\n      <div className=\"level is-mobile\">\n        <div className=\"level-item has-text-centered\">\n          <div className=\"file is-dark has-name is-boxed\">\n            <label className=\"file-label\">\n              <input\n                className=\"file-input\"\n                type=\"file\"\n                name=\"image\"\n                accept=\"image/*\"\n                onChange={showName}\n              />\n              <span className=\"file-cta\">\n                <span className=\"file-icon\">\n                  <i className=\"fas fa-upload\"></i>\n                </span>\n                <span className=\"file-label\">Choose a fileâ€¦</span>\n              </span>\n              <span className=\"file-name\">\n                {file === null ? null : file.name}\n              </span>\n            </label>\n          </div>\n        </div>\n      </div>\n      <div className=\"level has-centered\">\n        {load ? (\n          <div className=\"columns level-item has-centered\">\n            <div className=\"column is-two-thirds\">\n              <progress className=\"progress is-dark\" max=\"100\">\n                30%\n              </progress>\n            </div>\n          </div>\n        ) : (\n          <div className=\"level-item has-centered\">\n            <button className=\"button is-dark is-rounded\" onClick={submit}>\n              <span className=\"icon\">\n                <i className=\"fas fa-dice-d20\"></i>\n              </span>\n              <span>Convert</span>\n            </button>\n          </div>\n        )}\n      </div>\n      <div className=\"has-centered\">\n        {success ? (\n          <div className=\"has-centered\">\n            <div className=\"container level-item has-centered\">\n              <p>Your converted file is ready to download!</p>\n            </div>\n            <br />\n            <div className=\"container level-item has-centered\">\n              <button className=\"button is-dark is-outlined\" onClick={download}>\n                <span className=\"icon is-small\">\n                  <i className=\"fas fa-download\"></i>\n                </span>\n              </button>\n            </div>\n          </div>\n        ) : null}\n      </div>\n      <br />\n    </section>\n  );\n};\n\nexport default Document;\n","import jsPDF from \"jspdf\";\nexport const HtmlToPdf = file => {\n  let reader = new FileReader();\n  reader.readAsText(file);\n  reader.onloadend = () => {\n    var doc = new jsPDF();\n    doc.setFontType(\"normal\");\n    doc.setFontSize(\"14\");\n    doc.text(reader.result, 10, 10);\n    doc.save(file.name + \".pdf\");\n  };\n};\n"],"sourceRoot":""}