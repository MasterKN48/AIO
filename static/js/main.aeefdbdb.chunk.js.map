{"version":3,"sources":["component/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","style","color","href","Image","lazy","Document","Compression","Music","NotFound","withRouter","location","pathname","to","aria-hidden","fallback","exact","path","component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.aeefdbdb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer container hero is-dark is-bold\">\n      <div className=\"content has-text-centered\">\n        <p>\n          <strong style={{ color: \"white\" }}>AIO (All in one)</strong> by{\" \"}\n          <a href=\"https://masterkn.tech\">MasterKN48</a>.\n          <br />\n          The source code is available{\" \"}\n          <a href=\"https://github.com/MasterKN48/aio\">Github</a>. <br />\n          The website use <a href=\"https://bulma.io/\">Bulma CSS</a>.\n        </p>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { Suspense, lazy } from \"react\";\nimport { withRouter, NavLink, Switch, Route } from \"react-router-dom\";\n// import Image from \"./component/Image\";\n// import Document from \"./component/Document\";\nimport Footer from \"./component/Footer\";\n\nconst Image = lazy(() => import(\"./component/Image\"));\nconst Document = lazy(() => import(\"./component/Document\"));\nconst Compression = lazy(() => import(\"./component/Compression\"));\nconst Music = lazy(() => import(\"./component/Music\"));\nconst NotFound = () => (\n  <div className=\"container level has-centered\">\n    <h1>404</h1>\n    <br />\n    <br />\n  </div>\n);\nconst App = location => {\n  return (\n    <section className=\"container-fluid is-mobile\">\n      <div className=\"container\">\n        <section className=\"hero is-dark is-bold has-text-centered\">\n          <div className=\"hero-body\">\n            <div className=\"container\">\n              <h1 className=\"title\">AIO</h1>\n              <h2 className=\"subtitle\">Platform for file type conversion</h2>\n            </div>\n          </div>\n        </section>\n        <div className=\"tabs is-centered\">\n          <ul>\n            <li\n              className={\n                location.location.pathname !== \"/aio\" ? null : \"is-active\"\n              }\n            >\n              <NavLink to=\"/aio\">\n                <span className=\"icon is-small\">\n                  <i className=\"fas fa-image\" aria-hidden=\"true\"></i>\n                </span>\n                <span>Pictures</span>\n              </NavLink>\n            </li>\n            <li\n              className={\n                location.location.pathname !== \"/aio/docs\" ? null : \"is-active\"\n              }\n            >\n              <NavLink to=\"/aio/docs\">\n                <span className=\"icon is-small\">\n                  <i className=\"fas fa-file-alt\" aria-hidden=\"true\"></i>\n                </span>\n                <span>Documents</span>\n              </NavLink>\n            </li>\n            <li\n              className={\n                location.location.pathname !== \"/aio/music\" ? null : \"is-active\"\n              }\n            >\n              <NavLink to=\"/aio/music\">\n                <span className=\"icon is-small\">\n                  <i className=\"fas fa-music\"></i>\n                </span>\n                <span>Music</span>\n              </NavLink>\n            </li>\n            <li\n              className={\n                location.location.pathname !== \"/aio/comp\" ? null : \"is-active\"\n              }\n            >\n              <NavLink to=\"/aio/comp\">\n                <span className=\"icon is-small\">\n                  <i className=\"fas fa-file-archive\"></i>\n                </span>\n                <span>Compression</span>\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n        <Suspense\n          fallback={\n            <div className=\"container has-text-centered has-centered\">\n              <button className=\"button is-dark is-loading spd\">Loading</button>\n            </div>\n          }\n        >\n          <Switch>\n            <Route exact path=\"/aio\" component={Image} />\n            <Route path=\"/aio/docs\" component={Document} />\n            <Route path=\"/aio/comp\" component={Compression} />\n            <Route path=\"/aio/music\" component={Music} />\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </div>\n      <Footer />\n    </section>\n  );\n};\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}