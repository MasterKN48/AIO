{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","component/Algorithms/image/JPG_To_ALL.js","component/Algorithms/image/PNG_To_ALL.js","component/Algorithms/image/WEBP_To_ALL.js","component/Algorithms/image/SVG_To_ALL.js","component/Algorithms/image/GIF_To_ALL.js","component/Image.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_slicedToArray","arr","Array","isArray","Symbol","iterator","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","TypeError","JpgToAllConvertor","dataURL","ctx","document","getElementById","getContext","image","Image","onload","width","naturalWidth","height","naturalHeight","canvas","drawImage","src","PngToAllConvertor","WebpToAllConvertor","SvgToAllConvertor","GifToAllConvertor","useState","fr","to","load","setLoading","success","setSuccess","file","setFile","from","type","setType","fileType","e","name","className","onChange","defaultValue","map","k","accept","files","max","onClick","preventDefault","alert","size","console","log","toLowerCase","split","pop","reader","FileReader","readAsDataURL","result","setTimeout","id","style","display","s","format","download","dataURI","toDataURL","byteString","atob","arrayBuffer","ArrayBuffer","_ia","Uint8Array","charCodeAt","dataView","DataView","blob","Blob","href","URL","createObjectURL","downloadFromJpg","downloadFromPng","downloadFromWebp","mimeString","downloadFromSvg","downloadFromGif"],"mappings":"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","file":"static/js/5.eba97155.chunk.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","/**Algo\n * 1-> Converting image to base 64.(In main file)\n * 2-> pass base64 to function.\n * 3-> create canvas with that base64 data uri.\n * 4-> keep mind with window.innerHieght and width\n * 5-> convert canvas to image by toDataUrl() function in js. (In main file)\n */\n\nexport const JpgToAllConvertor = dataURL => {\n  var canvas = document.getElementById(\"canvas\");\n  var ctx = canvas.getContext(\"2d\");\n  var image = new Image();\n  image.onload = function() {\n    var width = image.naturalWidth || image.width;\n    var height = image.naturalHeight || image.height;\n    ctx.canvas.width = width;\n    ctx.canvas.height = height;\n    ctx.drawImage(image, 0, 0, width, height);\n  };\n  image.src = dataURL;\n};\nexport const downloadFromJpg = (name, type, setSuccess) => {\n  //file name as argument\n  let format = type === \"svg+xml\" ? \"svg\" : type;\n  document.getElementById(\"downloader\").download = name + \".\" + format;\n\n  type = type === \"svg\" ? \"svg+xml\" : type;\n\n  // converting data uri to blob taken form github gist\n  let dataURI = document\n    .getElementById(\"canvas\")\n    .toDataURL(\"image/\" + type, 0.8);\n\n  let byteString = atob(dataURI.split(\",\")[1]);\n\n  // separate out the mime component\n  let mimeString = dataURI\n    .split(\",\")[0]\n    .split(\":\")[1]\n    .split(\";\")[0];\n\n  // write the bytes of the string to an ArrayBuffer\n  let arrayBuffer = new ArrayBuffer(byteString.length);\n  let _ia = new Uint8Array(arrayBuffer);\n  for (let i = 0; i < byteString.length; i++) {\n    _ia[i] = byteString.charCodeAt(i);\n  }\n\n  let dataView = new DataView(arrayBuffer);\n  let blob = new Blob([dataView], { type: \"image/\" + type });\n  document.getElementById(\"downloader\").href = URL.createObjectURL(blob);\n  setSuccess(false);\n};\n","/**Algo\n * 1-> Converting image to base 64.(In main file)\n * 2-> pass base64 to function.\n * 3-> create canvas with that base64 data uri.\n * 4-> keep mind with window.innerHieght and width\n * 5-> convert canvas to image by toDataUrl() function in js. (In main file)\n */\n\nexport const PngToAllConvertor = dataURL => {\n  var canvas = document.getElementById(\"canvas\"); // just canvas name is jpgtopng\n  var ctx = canvas.getContext(\"2d\");\n  var image = new Image();\n  image.onload = function() {\n    var width = image.naturalWidth || image.width;\n    var height = image.naturalHeight || image.height;\n    ctx.canvas.width = width;\n    ctx.canvas.height = height;\n    ctx.drawImage(image, 0, 0, width, height);\n  };\n  image.src = dataURL;\n};\nexport const downloadFromPng = (name, type, setSuccess) => {\n  //file name as argument\n  let format = type === \"svg+xml\" ? \"svg\" : type;\n  document.getElementById(\"downloader\").download = name + \".\" + format;\n  // converting data uri to blob taken form github gist\n  type = type === \"svg\" ? \"svg+xml\" : type;\n\n  let dataURI = document\n    .getElementById(\"canvas\")\n    .toDataURL(\"image/\" + type, 0.9);\n  //console.log(dataURI);\n  let byteString = atob(dataURI.split(\",\")[1]);\n\n  // separate out the mime component\n  //   let mimeString = dataURI\n  //     .split(\",\")[0]\n  //     .split(\":\")[1]\n  //     .split(\";\")[0];\n  //   console.log(mimeString);\n  // write the bytes of the string to an ArrayBuffer\n  let arrayBuffer = new ArrayBuffer(byteString.length);\n  let _ia = new Uint8Array(arrayBuffer);\n  for (let i = 0; i < byteString.length; i++) {\n    _ia[i] = byteString.charCodeAt(i);\n  }\n\n  let dataView = new DataView(arrayBuffer);\n  let blob = new Blob([dataView], { type: \"image/\" + type });\n  //console.log(blob);\n  document.getElementById(\"downloader\").href = URL.createObjectURL(blob);\n  setSuccess(false);\n};\n","/**Algo\n * 1-> Converting image to base 64.(In main file)\n * 2-> pass base64 to function.\n * 3-> create canvas with that base64 data uri.\n * 4-> keep mind with window.innerHieght and width\n * 5-> convert canvas to image by toDataUrl() function in js. (In main file)\n */\n\nexport const WebpToAllConvertor = dataURL => {\n  var canvas = document.getElementById(\"canvas\");\n  var ctx = canvas.getContext(\"2d\");\n  var image = new Image();\n  image.onload = function() {\n    var width = image.naturalWidth || image.width;\n    var height = image.naturalHeight || image.height;\n    ctx.canvas.width = width;\n    ctx.canvas.height = height;\n    ctx.drawImage(image, 0, 0, width, height);\n  };\n  image.src = dataURL;\n};\nexport const downloadFromWebp = (name, type, setSuccess) => {\n  //file name as argument\n  let format = type === \"svg+xml\" ? \"svg\" : type;\n  document.getElementById(\"downloader\").download = name + \".\" + format;\n  // converting data uri to blob aken form github gist\n  let dataURI = document.getElementById(\"canvas\").toDataURL(\"image/\" + type, 1);\n\n  let byteString = atob(dataURI.split(\",\")[1]);\n\n  // separate out the mime component\n  let mimeString = dataURI\n    .split(\",\")[0]\n    .split(\":\")[1]\n    .split(\";\")[0];\n\n  // write the bytes of the string to an ArrayBuffer\n  let arrayBuffer = new ArrayBuffer(byteString.length);\n  let _ia = new Uint8Array(arrayBuffer);\n  for (let i = 0; i < byteString.length; i++) {\n    _ia[i] = byteString.charCodeAt(i);\n  }\n\n  let dataView = new DataView(arrayBuffer);\n  let blob = new Blob([dataView], { type: \"image/\" + type });\n  document.getElementById(\"downloader\").href = URL.createObjectURL(blob);\n  setSuccess(false);\n};\n","/**Algo\n * 1-> Converting image to base 64.(In main file)\n * 2-> pass base64 to function.\n * 3-> create canvas with that base64 data uri.\n * 4-> keep mind with window.innerHieght and width\n * 5-> convert canvas to image by toDataUrl() function in js. (In main file)\n */\n\nexport const SvgToAllConvertor = dataURL => {\n  var canvas = document.getElementById(\"canvas\");\n  var ctx = canvas.getContext(\"2d\");\n  var image = new Image();\n  image.onload = function() {\n    var width = image.naturalWidth || image.width;\n    var height = image.naturalHeight || image.height;\n    ctx.canvas.width = width;\n    ctx.canvas.height = height;\n    ctx.drawImage(image, 0, 0, width, height);\n  };\n  image.src = dataURL;\n};\nexport const downloadFromSvg = (name, type, setSuccess) => {\n  //file name as argument\n  document.getElementById(\"downloader\").download = name + \".\" + type;\n  // converting data uri to blob aken form github gist\n  let dataURI = document\n    .getElementById(\"canvas\")\n    .toDataURL(\"image/\" + type, 0.8);\n\n  let byteString = atob(dataURI.split(\",\")[1]);\n\n  // separate out the mime component\n  let mimeString = dataURI\n    .split(\",\")[0]\n    .split(\":\")[1]\n    .split(\";\")[0];\n\n  // write the bytes of the string to an ArrayBuffer\n  let arrayBuffer = new ArrayBuffer(byteString.length);\n  let _ia = new Uint8Array(arrayBuffer);\n  for (let i = 0; i < byteString.length; i++) {\n    _ia[i] = byteString.charCodeAt(i);\n  }\n\n  let dataView = new DataView(arrayBuffer);\n  let blob = new Blob([dataView], { type: mimeString });\n  document.getElementById(\"downloader\").href = URL.createObjectURL(blob);\n  setSuccess(false);\n};\n","/**Algo\n * 1-> Converting image to base 64.(In main file)\n * 2-> pass base64 to function.\n * 3-> create canvas with that base64 data uri.\n * 4-> keep mind with window.innerHieght and width\n * 5-> convert canvas to image by toDataUrl() function in js. (In main file)\n */\n\nexport const GifToAllConvertor = dataURL => {\n  var canvas = document.getElementById(\"canvas\");\n  var ctx = canvas.getContext(\"2d\");\n  var image = new Image();\n  image.onload = function() {\n    var width = image.naturalWidth || image.width;\n    var height = image.naturalHeight || image.height;\n    ctx.canvas.width = width;\n    ctx.canvas.height = height;\n    ctx.drawImage(image, 0, 0, width, height);\n  };\n  image.src = dataURL;\n};\nexport const downloadFromGif = (name, type, setSuccess) => {\n  //file name as argument\n  let format = type === \"svg+xml\" ? \"svg\" : type;\n  document.getElementById(\"downloader\").download = name + \".\" + format;\n  // converting data uri to blob aken form github gist\n  type = type === \"svg\" ? \"svg+xml\" : type;\n  let dataURI = document\n    .getElementById(\"canvas\")\n    .toDataURL(\"image/\" + type, 0.8);\n\n  let byteString = atob(dataURI.split(\",\")[1]);\n\n  // separate out the mime component\n  let mimeString = dataURI\n    .split(\",\")[0]\n    .split(\":\")[1]\n    .split(\";\")[0];\n\n  // write the bytes of the string to an ArrayBuffer\n  let arrayBuffer = new ArrayBuffer(byteString.length);\n  let _ia = new Uint8Array(arrayBuffer);\n  for (let i = 0; i < byteString.length; i++) {\n    _ia[i] = byteString.charCodeAt(i);\n  }\n\n  let dataView = new DataView(arrayBuffer);\n  let blob = new Blob([dataView], { type: \"image/\" + type });\n  document.getElementById(\"downloader\").href = URL.createObjectURL(blob);\n  setSuccess(false);\n};\n","import React, { useState } from \"react\";\nimport {\n  JpgToAllConvertor,\n  downloadFromJpg\n} from \"./Algorithms/image/JPG_To_ALL\";\nimport {\n  PngToAllConvertor,\n  downloadFromPng\n} from \"./Algorithms/image/PNG_To_ALL\";\nimport {\n  WebpToAllConvertor,\n  downloadFromWebp\n} from \"./Algorithms/image/WEBP_To_ALL\";\nimport {\n  SvgToAllConvertor,\n  downloadFromSvg\n} from \"./Algorithms/image/SVG_To_ALL\";\nimport {\n  GifToAllConvertor,\n  downloadFromGif\n} from \"./Algorithms/image/GIF_To_ALL\";\nconst Image = () => {\n  // eslint-disable-next-line\n  const [fr, setFr] = useState([\"PNG\", \"JPEG\", \"WEBP\", \"SVG\", \"GIF\"]); // eslint-disable-next-line\n  const [to, setTo] = useState([\"PNG\", \"JPEG\", \"ICO\", \"WEBP\", \"SVG\"]);\n  const [load, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [file, setFile] = useState(null);\n  const [type, setType] = useState({\n    from: \"\",\n    to: \"\"\n  });\n  // const [error, setError] = useState(\"\");\n  const showName = e => {\n    setFile(e.target.files[0]);\n  };\n  const fileType = e => {\n    //console.log(e.target.value);\n    setType({\n      ...type,\n      [e.target.name]: e.target.value\n    });\n  };\n  const submit = e => {\n    e.preventDefault();\n    if (file === null) {\n      alert(\"Please first select file and types\");\n      return false;\n    }\n    if (file.size > 112582912) {\n      alert(\"File Size must be less then 11mb.\");\n      return false;\n    }\n    if (type.from === \"\" || type.from === \"Original File Types\") {\n      console.log(type);\n      alert(\"'From' file type is not selected!\");\n      return false;\n    }\n    if (type.to === \"\" || type.to === \"New File Types\") {\n      alert(\"'To' file type is not selected\");\n      return false;\n    }\n    if (type.from.toLowerCase() !== file.name.split(\".\").pop()) {\n      if (type.from === \"JPG\") {\n        if (\n          file.name.split(\".\").pop() !== \"jpg\" &&\n          file.name.split(\".\").pop() !== \"jpeg\"\n        ) {\n          alert(\n            \"Mismatch in selected file type: \" +\n              file.name.split(\".\").pop() +\n              \" with 'From' Select box: \" +\n              type.from.toLowerCase()\n          );\n          return false;\n        }\n      } else {\n        alert(\n          \"Mismatch in selected file type: \" +\n            file.name.split(\".\").pop() +\n            \" with 'From' Select box: \" +\n            type.from.toLowerCase()\n        );\n        return false;\n      }\n    }\n    if (type.from === type.to) {\n      alert(\"'From' and 'To' is same!\");\n      return false;\n    }\n    // if (type.from === \"GIF\" && type.to === \"SVG\") {\n    //   alert(\"Not Possible Now\");\n    //   return false;\n    // }\n    setSuccess(false);\n    setLoading(true);\n    // selecting algorithms accordingly\n    if (type.from === \"JPEG\") {\n      let reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = function() {\n        const dataURL = reader.result;\n        JpgToAllConvertor(dataURL);\n      };\n    }\n    if (type.from === \"PNG\") {\n      let reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = function() {\n        const dataURL = reader.result;\n        PngToAllConvertor(dataURL);\n      };\n    }\n    if (type.from === \"WEBP\") {\n      let reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = function() {\n        const dataURL = reader.result;\n        WebpToAllConvertor(dataURL);\n      };\n    }\n    if (type.from === \"SVG\") {\n      let reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = function() {\n        const dataURL = reader.result;\n        SvgToAllConvertor(dataURL);\n      };\n    }\n    if (type.from === \"GIF\") {\n      let reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = function() {\n        const dataURL = reader.result;\n        GifToAllConvertor(dataURL);\n      };\n    }\n    // showing loading just for fun\n    setTimeout(() => {\n      setLoading(false);\n      setSuccess(true);\n    }, 2000);\n  };\n\n  //handle download accordingly\n  const download = () => {\n    if (type.from === \"JPEG\") {\n      let s;\n      if (type.to === \"SVG\") {\n        s = \"SVG\";\n      } else {\n        s = type.to;\n      }\n\n      downloadFromJpg(file.name.split(\".\")[0], s.toLowerCase(), setSuccess); //passing file name\n    }\n    if (type.from === \"PNG\") {\n      let s;\n      if (type.to === \"JPEG\") {\n        s = \"JPEG\";\n      }\n      if (type.to === \"SVG\") {\n        s = \"SVG+XML\";\n      } else {\n        s = type.to;\n      }\n      downloadFromPng(file.name.split(\".\")[0], s.toLowerCase(), setSuccess); //passing file name\n    }\n    if (type.from === \"WEBP\") {\n      let s;\n      if (type.to === \"JPEG\") {\n        s = \"JPEG\";\n      }\n      if (type.to === \"SVG\") {\n        s = \"SVG+XML\";\n      } else {\n        s = type.to;\n      }\n      downloadFromWebp(file.name.split(\".\")[0], s.toLowerCase(), setSuccess); //passing file name\n    }\n    if (type.from === \"SVG\") {\n      let s = type.to === \"JPEG\" ? \"JPEG\" : type.to;\n      downloadFromSvg(file.name.split(\".\")[0], s.toLowerCase(), setSuccess); //passing file name\n    }\n    if (type.from === \"GIF\") {\n      let s;\n      if (type.to === \"JPEG\") {\n        s = \"JPEG\";\n      }\n      if (type.to === \"SVG\") {\n        s = \"SVG+XML\";\n      } else {\n        s = type.to;\n      }\n      downloadFromGif(file.name.split(\".\")[0], s.toLowerCase(), setSuccess); //passing file name\n    }\n  };\n  return (\n    <section className=\"container\">\n      <div className=\"level\">\n        <div className=\"level-left\">\n          <div className=\"level-item\">\n            <p className=\"subtitle is-5\">\n              <strong>From</strong>\n            </p>\n          </div>\n          <div className=\"level-item\">\n            <div className=\"field\">\n              <div className=\"control has-icons-left\">\n                <div className=\"select is-rounded\">\n                  <select name=\"from\" onChange={fileType}>\n                    <option defaultValue>Original File Types</option>\n                    {fr.map((i, k) => {\n                      return <option key={k}>{i}</option>;\n                    })}\n                  </select>\n                </div>\n                <div className=\"icon is-small is-left\">\n                  <i className=\"fas fa-globe\"></i>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"level-right\">\n          <div className=\"level-item\">\n            <p className=\"subtitle is-5\">\n              <strong>To</strong>\n            </p>\n          </div>\n          <div className=\"field shift\">\n            <div className=\"control has-icons-left\">\n              <div className=\"select is-rounded\">\n                <select name=\"to\" onChange={fileType}>\n                  <option defaultValue>New File Types</option>\n                  {to.map((i, k) => {\n                    return <option key={k}>{i}</option>;\n                  })}\n                </select>\n              </div>\n              <div className=\"icon is-small is-left\">\n                <i className=\"fas fa-globe\"></i>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"level is-mobile\">\n        <div className=\"level-item has-text-centered\">\n          <div className=\"file is-dark has-name is-boxed\">\n            <label className=\"file-label\">\n              <input\n                className=\"file-input\"\n                type=\"file\"\n                name=\"image\"\n                accept=\"image/*\"\n                onChange={showName}\n              />\n              <span className=\"file-cta\">\n                <span className=\"file-icon\">\n                  <i className=\"fas fa-upload\"></i>\n                </span>\n                <span className=\"file-label\">Choose a file…</span>\n              </span>\n              <span className=\"file-name\">\n                {file === null ? null : file.name}\n              </span>\n            </label>\n          </div>\n        </div>\n      </div>\n      <div className=\"level has-centered\">\n        {load ? (\n          <div className=\"columns level-item has-centered\">\n            <div className=\"column is-two-thirds\">\n              <progress className=\"progress is-dark\" max=\"100\">\n                30%\n              </progress>\n            </div>\n          </div>\n        ) : (\n          <div className=\"level-item has-centered\">\n            <button className=\"button is-dark is-rounded\" onClick={submit}>\n              <span className=\"icon\">\n                <i className=\"fas fa-dice-d20\"></i>\n              </span>\n              <span>Convert</span>\n            </button>\n          </div>\n        )}\n      </div>\n      <canvas\n        className=\"container has-centered\"\n        id=\"canvas\"\n        style={{ display: \"none\" }}\n      ></canvas>\n      <div className=\"has-centered\">\n        {success ? (\n          <div className=\"has-centered\">\n            <div className=\"container level-item has-centered\">\n              <p>Your converted file is ready to download!</p>\n            </div>\n            <br />\n            <div className=\"container level-item has-centered\">\n              <a\n                onClick={download}\n                id=\"downloader\"\n                href=\"#i\"\n                className=\"button is-dark is-outlined\"\n              >\n                <span className=\"icon is-small\">\n                  <i className=\"fas fa-download\"></i>\n                </span>\n              </a>\n            </div>\n          </div>\n        ) : null}\n      </div>\n      <br />\n    </section>\n  );\n};\n\nexport default Image;\n"],"sourceRoot":""}