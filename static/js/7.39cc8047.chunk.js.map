{"version":3,"sources":["component/Document.js","component/Algorithms/docs/DOC_To_Other.js","component/Algorithms/docs/HTML_To_Other.js","component/Algorithms/docs/TXT_To_Other.js","component/Algorithms/docs/MD_To_Other.js"],"names":["Document","useState","fr","to","load","setLoading","success","setSuccess","file","setFile","from","type","setType","fileType","e","target","name","value","className","onChange","defaultValue","map","i","k","key","style","color","accept","files","max","onClick","preventDefault","size","alert","console","log","setTimeout","id","reader","FileReader","readAsText","onloadend","dataURI","result","source","encodeURIComponent","fileDownload","document","createElement","body","appendChild","href","download","split","click","removeChild","downloadFromHtml_To_Doc","downloadFromHtml_To_Pdf","md","require","Converter","makeMd","downloadFromHtml_To_Md","downloadFromTxt_To_Doc","downloadFromTxt_To_Pdf","downloadFromTxt_To_Md","sourceHTML","substr","downloadFromTxt_To_Html","mammoth","readAsArrayBuffer","arrayBuffer","convertToHtml","then","data","el","setAttribute","innerHTML","mywindow","window","open","write","close","focus","print","done","download_doc_to_pdf","convertToMarkdown","download_doc_to_md","download_doc_to_html","convertMd","err","output","downloadMd_to_Pdf","html","makeHtml","downloadMd_to_Html","downloadMd_to_Docx"],"mappings":"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","file":"static/js/7.39cc8047.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport {\n  download_doc_to_pdf,\n  doc_to_other, // may use in future\n  download_doc_to_md,\n  download_doc_to_html\n} from \"./Algorithms/docs/DOC_To_Other\";\nimport {\n  html_to_other,\n  downloadFromHtml_To_Doc,\n  downloadFromHtml_To_Pdf,\n  downloadFromHtml_To_Md\n} from \"./Algorithms/docs/HTML_To_Other\";\nimport {\n  txt_to_other,\n  downloadFromTxt_To_Doc,\n  downloadFromTxt_To_Pdf,\n  downloadFromTxt_To_Md,\n  downloadFromTxt_To_Html\n} from \"./Algorithms/docs/TXT_To_Other\";\n\nimport {\n  downloadMd_to_Pdf,\n  downloadMd_to_Html,\n  downloadMd_to_Docx\n} from \"./Algorithms/docs/MD_To_Other\";\n\nconst Document = () => {\n  // eslint-disable-next-line\n  const [fr, setFr] = useState([\"DOCX\", \"TXT\", \"HTML\", \"MD\"]); // eslint-disable-next-line\n  const [to, setTo] = useState([\"PDF\", \"DOCX\", \"MD\", \"HTML\"]);\n  const [load, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [file, setFile] = useState(null);\n  const [type, setType] = useState({\n    from: \"\",\n    to: \"\"\n  });\n  const showName = e => {\n    setFile(e.target.files[0]);\n  };\n  const fileType = e => {\n    //console.log(e.target.value);\n    setType({\n      ...type,\n      [e.target.name]: e.target.value\n    });\n  };\n  const submit = e => {\n    e.preventDefault();\n    if (file === null) {\n      alert(\"Please first select file and types\");\n      return;\n    }\n    if (file.size > 112582912) {\n      alert(\"File Size must be less then 11mb.\");\n      return;\n    }\n    if (type.from === \"\") {\n      console.log(type);\n      alert(\"'From' file type is not selected!\");\n      return;\n    }\n    if (type.to === \"\") {\n      alert(\"'To' file type is not selected\");\n      return;\n    }\n    setSuccess(false);\n    setLoading(true);\n\n    if (type.from === \"DOCX\") {\n      if (type.to === \"DOCX\") {\n        alert(\"To and from type is same\");\n        setLoading(false);\n        return;\n      }\n      //download_doc_to_pdf(file, setSuccess);\n      doc_to_other(file, setSuccess);\n    }\n    if (type.from === \"HTML\") {\n      html_to_other(file);\n    }\n    if (type.from === \"TXT\") {\n      txt_to_other(file);\n    }\n    if (type.from === \"MD\") {\n      console.log(\"time\");\n    }\n    setTimeout(() => {\n      setLoading(false);\n      setSuccess(true);\n    }, 2000);\n  };\n  const download = () => {\n    if (type.from === \"HTML\") {\n      if (type.to === \"DOCX\") {\n        downloadFromHtml_To_Doc(file, setSuccess);\n      }\n      if (type.to === \"PDF\") {\n        downloadFromHtml_To_Pdf(file, setSuccess);\n      }\n      if (type.to === \"MD\") {\n        downloadFromHtml_To_Md(file, setSuccess);\n      }\n    }\n    if (type.from === \"TXT\") {\n      if (type.to === \"DOCX\") {\n        downloadFromTxt_To_Doc(file, setSuccess);\n      }\n      if (type.to === \"PDF\") {\n        downloadFromTxt_To_Pdf(file, setSuccess);\n      }\n      if (type.to === \"MD\") {\n        downloadFromTxt_To_Md(file, setSuccess);\n      }\n      if (type.to === \"HTML\") {\n        downloadFromTxt_To_Html(file, setSuccess);\n      }\n    }\n    if (type.from === \"DOCX\") {\n      if (type.to === \"PDF\") {\n        download_doc_to_pdf(file, setSuccess);\n      }\n      if (type.to === \"MD\") {\n        download_doc_to_md(file, setSuccess);\n      }\n      if (type.to === \"HTML\") {\n        download_doc_to_html(file, setSuccess);\n      }\n    }\n    if (type.from === \"MD\") {\n      if (type.to === \"PDF\") {\n        downloadMd_to_Pdf(file, setSuccess);\n      }\n      if (type.to === \"HTML\") {\n        downloadMd_to_Html(file, setSuccess);\n      }\n      if (type.to === \"DOCX\") {\n        downloadMd_to_Docx(file, setSuccess);\n      }\n    }\n  };\n  return (\n    <section className=\"container\">\n      <div className=\"level\">\n        <div className=\"level-left\">\n          <div className=\"level-item\">\n            <p className=\"subtitle is-5\">\n              <strong>From</strong>\n            </p>\n          </div>\n          <div className=\"level-item\">\n            <div className=\"field\">\n              <div className=\"control has-icons-left\">\n                <div className=\"select is-rounded\">\n                  <select name=\"from\" onChange={fileType}>\n                    <option defaultValue>Original File Types</option>\n                    {fr.map((i, k) => {\n                      return <option key={k}>{i}</option>;\n                    })}\n                  </select>\n                </div>\n                <div className=\"icon is-small is-left\">\n                  <i className=\"fas fa-globe\"></i>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"level-right\">\n          <div className=\"level-item\">\n            <p className=\"subtitle is-5\">\n              <strong>To</strong>\n            </p>\n          </div>\n          <div className=\"field shift\">\n            <div className=\"control has-icons-left\">\n              <div className=\"select is-rounded\">\n                <select name=\"to\" onChange={fileType}>\n                  <option defaultValue>New File Types</option>\n                  {to.map((i, k) => {\n                    return <option key={k}>{i}</option>;\n                  })}\n                </select>\n              </div>\n              <div className=\"icon is-small is-left\">\n                <i className=\"fas fa-globe\"></i>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <p style={{ color: \"red\" }}>\n        *Under Construction:Txt,html to other work fine,rest are under\n        development*\n      </p>\n      <div className=\"level is-mobile\">\n        <div className=\"level-item has-text-centered\">\n          <div className=\"file is-dark has-name is-boxed\">\n            <label className=\"file-label\">\n              <input\n                className=\"file-input\"\n                type=\"file\"\n                name=\"image\"\n                accept=\"*.docx,*.pdf,*.html,*.txt,*.ppt\"\n                onChange={showName}\n              />\n              <span className=\"file-cta\">\n                <span className=\"file-icon\">\n                  <i className=\"fas fa-upload\"></i>\n                </span>\n                <span className=\"file-label\">Choose a file…</span>\n              </span>\n              <span className=\"file-name\">\n                {file === null ? null : file.name}\n              </span>\n            </label>\n          </div>\n        </div>\n      </div>\n      <div className=\"level has-centered\">\n        {load ? (\n          <div className=\"columns level-item has-centered\">\n            <div className=\"column is-two-thirds\">\n              <progress className=\"progress is-dark\" max=\"100\">\n                30%\n              </progress>\n            </div>\n          </div>\n        ) : (\n          <div className=\"level-item has-centered\">\n            <button className=\"button is-dark is-rounded\" onClick={submit}>\n              <span className=\"icon\">\n                <i className=\"fas fa-dice-d20\"></i>\n              </span>\n              <span>Convert</span>\n            </button>\n          </div>\n        )}\n      </div>\n\n      <div className=\"has-centered\">\n        {success ? (\n          <div className=\"has-centered\">\n            <div className=\"container level-item has-centered\">\n              <p>Your converted file is ready to download!</p>\n            </div>\n            <br />\n            <div className=\"container level-item has-centered\">\n              <button\n                className=\"button is-dark is-outlined\"\n                id=\"dl\"\n                onClick={download}\n              >\n                <span className=\"icon is-small\">\n                  <i className=\"fas fa-download\"></i>\n                </span>\n              </button>\n            </div>\n          </div>\n        ) : null}\n      </div>\n      <br />\n    </section>\n  );\n};\n\nexport default Document;\n","export const doc_to_other = file => {\n  console.log(\"object\");\n};\nexport const download_doc_to_pdf = (file, setSuccess) => {\n  var mammoth = require(\"mammoth\");\n  let reader = new FileReader();\n  reader.readAsArrayBuffer(file);\n  reader.onloadend = () => {\n    let arrayBuffer = reader.result;\n    mammoth\n      .convertToHtml({ arrayBuffer: arrayBuffer })\n      .then(function(result) {\n        var data = result.value;\n        let el = document.createElement(\"rd\");\n        el.setAttribute(\"id\", \"render\");\n\n        el.innerHTML = data;\n        // change render view by use docx render then put print on that div\n        var mywindow = window.open(\"\", \"PRINT\", \"height=500,width=600\");\n\n        mywindow.document.write(\n          \"<html><head><title>\" + file.name.split(\".\")[0] + \"</title>\"\n        );\n        mywindow.document.write(\"</head><body >\");\n        mywindow.document.write(el.innerHTML);\n        mywindow.document.write(\"</body></html>\");\n\n        mywindow.document.close(); // necessary for IE >= 10\n        mywindow.focus(); // necessary for IE >= 10*/\n\n        mywindow.print();\n        mywindow.close();\n        setSuccess(false);\n      })\n      .done();\n  };\n};\n\nexport const download_doc_to_md = (file, setSuccess) => {\n  var mammoth = require(\"mammoth\");\n  let reader = new FileReader();\n  reader.readAsArrayBuffer(file);\n  reader.onloadend = () => {\n    let arrayBuffer = reader.result;\n    mammoth\n      .convertToMarkdown({ arrayBuffer: arrayBuffer })\n      .then(function(result) {\n        var data = result.value;\n        var sourceHTML = data;\n\n        var source =\n          \"data:text/markdown;charset=utf-8,\" + encodeURIComponent(sourceHTML);\n        var fileDownload = document.createElement(\"a\");\n        document.body.appendChild(fileDownload);\n        fileDownload.href = source;\n        fileDownload.download = file.name.split(\".\")[0] + \".md\";\n        fileDownload.click();\n        document.body.removeChild(fileDownload);\n        setSuccess(false);\n      })\n      .done();\n  };\n};\n\nexport const download_doc_to_html = (file, setSuccess) => {\n  var mammoth = require(\"mammoth\");\n  let reader = new FileReader();\n  reader.readAsArrayBuffer(file);\n  reader.onloadend = () => {\n    let arrayBuffer = reader.result;\n    mammoth\n      .convertToHtml({ arrayBuffer: arrayBuffer })\n      .then(function(result) {\n        var data = result.value;\n        var sourceHTML = data;\n        var source =\n          \"data:text/html;charset=utf-8,\" + encodeURIComponent(sourceHTML);\n        var fileDownload = document.createElement(\"a\");\n        document.body.appendChild(fileDownload);\n        fileDownload.href = source;\n        fileDownload.download = file.name.split(\".\")[0] + \".html\";\n        fileDownload.click();\n        document.body.removeChild(fileDownload);\n        setSuccess(false);\n      })\n      .done();\n  };\n};\n","/**\n * 1-> Read file as text\n * 2-> create new data file\n * 2.1-> append data:application/vnd.ms-word;charset=utf-8, with text by using\n *       encodeURIComponent(text)\n * 2.2-> for pdf data:application/pdf;charset=utf-8,\n * 2.3-> create element <a></a> and put href as new data to download\n */\n\nexport const html_to_other = file => {\n  console.log(\"time\");\n};\n\nexport const downloadFromHtml_To_Md = (file, setSuccess) => {\n  let reader = new FileReader();\n  reader.readAsText(file);\n  reader.onloadend = () => {\n    let dataURI = reader.result;\n    var showdown = require(\"showdown\");\n    var converter = new showdown.Converter();\n    const md = converter.makeMd(dataURI);\n    var source = \"data:text/markdown,\" + encodeURIComponent(md);\n    var fileDownload = document.createElement(\"a\");\n    document.body.appendChild(fileDownload);\n    fileDownload.href = source;\n    fileDownload.download = file.name.split(\".\")[0] + \".md\";\n    fileDownload.click();\n    document.body.removeChild(fileDownload);\n    setSuccess(false);\n  };\n};\n\nexport const downloadFromHtml_To_Doc = (file, setSuccess) => {\n  let reader = new FileReader();\n  reader.readAsText(file);\n  reader.onloadend = () => {\n    let dataURI = reader.result;\n    var sourceHTML = dataURI + \"   <>By AIO </>\";\n    var source =\n      \"data:application/vnd.ms-word;charset=utf-8,\" +\n      encodeURIComponent(sourceHTML);\n    var fileDownload = document.createElement(\"a\");\n    document.body.appendChild(fileDownload);\n    fileDownload.href = source;\n    fileDownload.download = file.name.split(\".\")[0] + \".docx\";\n    fileDownload.click();\n    document.body.removeChild(fileDownload);\n    setSuccess(false);\n  };\n};\n\nexport const downloadFromHtml_To_Pdf = (file, setSuccess) => {\n  let reader = new FileReader();\n  reader.readAsText(file);\n  reader.onloadend = () => {\n    let dataURI = reader.result;\n    var sourceHTML = dataURI + \"   <>By AIO </>\";\n    var source =\n      \"data:application/pdf;charset=utf-8,\" + encodeURIComponent(sourceHTML);\n    var fileDownload = document.createElement(\"a\");\n    document.body.appendChild(fileDownload);\n    fileDownload.href = source;\n    fileDownload.download = file.name.split(\".\")[0] + \".pdf\";\n    fileDownload.click();\n    document.body.removeChild(fileDownload);\n\n    setSuccess(false);\n  };\n};\n","/**\n * 1-> Read file as text\n * 2-> create new data file\n * 2.1-> append data:application/vnd.ms-word;charset=utf-8, with text by using\n *       encodeURIComponent(text)\n * 2.2-> for pdf data:application/pdf;charset=utf-8,\n * 2.3-> create element <a></a> and put href as new data to download\n */\nexport const txt_to_other = file => {\n  console.log(\"time\");\n};\n\nexport const downloadFromTxt_To_Doc = (file, setSuccess) => {\n  let reader = new FileReader();\n  reader.readAsText(file);\n  reader.onloadend = () => {\n    let dataURI = reader.result;\n    var sourceHTML = dataURI + \"   <>By AIO </>\";\n    var source =\n      \"data:application/vnd.ms-word;charset=utf-8,\" +\n      encodeURIComponent(sourceHTML);\n    var fileDownload = document.createElement(\"a\");\n    document.body.appendChild(fileDownload);\n    fileDownload.href = source;\n    fileDownload.download = file.name.split(\".\")[0] + \".doc\";\n    fileDownload.click();\n    document.body.removeChild(fileDownload);\n    setSuccess(false);\n  };\n};\n\nexport const downloadFromTxt_To_Pdf = (file, setSuccess) => {\n  let reader = new FileReader();\n  reader.readAsText(file);\n  reader.onloadend = () => {\n    let dataURI = reader.result;\n    var sourceHTML = dataURI + \"   <>By AIO </>\";\n    var source =\n      \"data:application/pdf;charset=utf-8,\" + encodeURIComponent(sourceHTML);\n    var fileDownload = document.createElement(\"a\");\n    document.body.appendChild(fileDownload);\n    fileDownload.href = source;\n    fileDownload.download = file.name.split(\".\")[0] + \".pdf\";\n    fileDownload.click();\n    document.body.removeChild(fileDownload);\n\n    setSuccess(false);\n  };\n};\n\nexport const downloadFromTxt_To_Md = (file, setSuccess) => {\n  let reader = new FileReader();\n  reader.readAsText(file);\n  reader.onloadend = () => {\n    let dataURI = reader.result;\n    var sourceHTML = dataURI + \" \\n**By AIO**\";\n    var source =\n      \"data:text/markdown;charset=utf-8,\" + encodeURIComponent(sourceHTML);\n    var fileDownload = document.createElement(\"a\");\n    document.body.appendChild(fileDownload);\n    fileDownload.href = source;\n    fileDownload.download = file.name.split(\".\")[0] + \".md\";\n    fileDownload.click();\n    document.body.removeChild(fileDownload);\n\n    setSuccess(false);\n  };\n};\nexport const downloadFromTxt_To_Html = (file, setSuccess) => {\n  let reader = new FileReader();\n  reader.readAsText(file);\n  reader.onloadend = () => {\n    let dataURI = reader.result;\n    var sourceHTML = `<!doctype><html><head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"description\" content=\"${dataURI.substr(0, 40)}\">\n    <meta name=\"keywords\" content=\"${dataURI.substr(0, 20)}\">\n    <meta name=\"author\" content=\"AIO\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${dataURI.substr(0, 10)}</title>\n    </head><body style=\"color:#212121;background-color:#fafafa;word-wrap:break-word;margin:10 10 10 10\"><div>${dataURI}</div></body></html>`;\n    var source =\n      \"data:text/html;charset=utf-8,\" + encodeURIComponent(sourceHTML);\n    var fileDownload = document.createElement(\"a\");\n    document.body.appendChild(fileDownload);\n    fileDownload.href = source;\n    fileDownload.download = file.name.split(\".\")[0] + \".html\";\n    fileDownload.click();\n    document.body.removeChild(fileDownload);\n\n    setSuccess(false);\n  };\n};\n","export const downloadMd_to_Pdf = (file, setSuccess) => {\n  let reader = new FileReader();\n  reader.readAsText(file);\n  reader.onloadend = () => {\n    let dataURI = reader.result;\n    const convertMd = require(\"convert-md\");\n    convertMd(dataURI, { type: \"pdf\" }, (err, output) => {\n      if (err) throw err;\n      console.log(output);\n    });\n  };\n};\n\nexport const downloadMd_to_Html = (file, setSuccess) => {\n  let reader = new FileReader();\n  reader.readAsText(file);\n  reader.onloadend = () => {\n    let dataURI = reader.result;\n    var showdown = require(\"showdown\");\n    var converter = new showdown.Converter();\n    const html = converter.makeHtml(dataURI);\n    var source = \"data:text/html;charset=utf-8,\" + encodeURIComponent(html);\n    var fileDownload = document.createElement(\"a\");\n    document.body.appendChild(fileDownload);\n    fileDownload.href = source;\n    fileDownload.download = file.name.split(\".\")[0] + \".pdf\";\n    fileDownload.click();\n    document.body.removeChild(fileDownload);\n    setSuccess(false);\n  };\n};\n\nexport const downloadMd_to_Docx = (file, setSuccess) => {\n  let reader = new FileReader();\n  reader.readAsText(file);\n  reader.onloadend = () => {\n    let dataURI = reader.result;\n    var sourceHTML = dataURI;\n    var source =\n      \"data:application/vnd.ms-word;charset=utf-8,\" +\n      encodeURIComponent(sourceHTML);\n    var fileDownload = document.createElement(\"a\");\n    document.body.appendChild(fileDownload);\n    fileDownload.href = source;\n    fileDownload.download = file.name.split(\".\")[0] + \".docx\";\n    fileDownload.click();\n    document.body.removeChild(fileDownload);\n    setSuccess(false);\n  };\n};\n"],"sourceRoot":""}