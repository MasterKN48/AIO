{"version":3,"sources":["component/Compression.js","component/Algorithms/PNG_JPG_Compressor.js","component/Algorithms/WEBPCompressor.js","component/Algorithms/PDFCompressor.js"],"names":["Compression","useState","file","setFile","success","setSuccess","load","setLoading","from","type","setType","className","name","onChange","e","target","value","defaultValue","style","color","accept","files","max","onClick","preventDefault","size","alert","toLowerCase","split","pop","options","maxSizeMB","maxWidthOrHeight","useWebWorker","imageCompression","then","compressedFile","blob","reader","FileReader","readAsDataURL","onloadend","dataURI","result","document","getElementById","innerText","toFixed","download","href","catch","error","console","log","message","PNG_JPG_Compressor","onload","dataURL","ctx","getContext","image","Image","canvas","width","window","innerWidth","height","innerHeight","drawImage","src","setTimeout","toDataURL","replace","imgFileSize","Math","round","length","WEBPCompressor","readAsArrayBuffer","PDFCompressor","id","display","setSucess","byteString","atob","mimeString","arrayBuffer","ArrayBuffer","_ia","Uint8Array","i","charCodeAt","dataView","DataView","Blob","URL","createObjectURL","downloadWEBP","doc","jsPDF","addImage","undefined","save","downloadPDF"],"mappings":"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","file":"static/js/6.348b923d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n// import { JPGCompressor, downloadJPG } from \"./Algorithms/JPGCompressor\";\n// import { PNGCompressor, downloadPNG } from \"./Algorithms/PNGCompressor\";\nimport { downloadWEBP, WEBPCompressor } from \"./Algorithms/WEBPCompressor\";\nimport { PDFCompressor, downloadPDF } from \"./Algorithms/PDFCompressor\";\nimport { PNG_JPG_Compressor } from \"./Algorithms/PNG_JPG_Compressor\";\nconst Compression = () => {\n  const [file, setFile] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [load, setLoading] = useState(false);\n  const [type, setType] = useState({\n    from: \"\"\n  });\n  const showName = e => {\n    setFile(e.target.files[0]);\n  };\n  const fileType = e => {\n    //console.log(e.target.value);\n    setType({\n      ...type,\n      [e.target.name]: e.target.value\n    });\n  };\n  const submit = e => {\n    e.preventDefault();\n    if (file === null) {\n      alert(\"Please first select file and types\");\n      return;\n    }\n    if (file.size > 112582912) {\n      alert(\"File Size must be less then 11mb.\");\n      return;\n    }\n    if (type.from === \"\" || type.from === \"Original File Types\") {\n      alert(\"'From' file type is not selected!\");\n      return;\n    }\n    if (type.from.toLowerCase() !== file.name.split(\".\").pop()) {\n      if (type.from === \"JPEG/JPG\") {\n        if (\n          file.name.split(\".\").pop() !== \"jpg\" &&\n          file.name.split(\".\").pop() !== \"jpeg\"\n        ) {\n          alert(\n            \"Mismatch in selected file type: \" +\n              file.name.split(\".\").pop() +\n              \" with 'From' Select box: \" +\n              type.from.toLowerCase()\n          );\n          return false;\n        }\n      } else {\n        alert(\n          \"Mismatch in selected file type: \" +\n            file.name.split(\".\").pop() +\n            \" with 'From' Select box: \" +\n            type.from.toLowerCase()\n        );\n        return false;\n      }\n    }\n    setSuccess(false);\n    setLoading(true);\n    // if (type.from === \"JPG\" || type.from === \"JPEG\") {\n    //   let reader = new FileReader();\n    //   reader.readAsDataURL(file);\n    //   reader.onload = function() {\n    //     const dataURL = reader.result;\n    //     JPGCompressor(dataURL);\n    //   };\n    // }\n    if (\n      type.from === \"JPEG/JPG\" ||\n      type.from === \"PNG\" ||\n      type.from === \"ICO\"\n    ) {\n      PNG_JPG_Compressor(file, setLoading, setSuccess);\n    }\n    if (type.from === \"WEBP\") {\n      let reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = function() {\n        const dataURL = reader.result;\n        WEBPCompressor(dataURL);\n      };\n    }\n    if (type.from === \"PDF\") {\n      let reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onload = function() {\n        const dataURL = reader.result;\n        PDFCompressor(dataURL);\n      };\n    }\n  };\n  //handle download accordingly\n  const download = () => {\n    if (type.from === \"WEBP\") {\n      downloadWEBP(file.name.split(\".\")[0], setSuccess); //passing file name\n    }\n    if (type.from === \"PDF\") {\n      downloadPDF(file.name.split(\".\")[0], setSuccess); //passing file name\n    }\n  };\n  return (\n    <section className=\"container\">\n      <div className=\"level is-mobile\">\n        <div className=\"level-item has-text-centered\">\n          <div className=\"field\">\n            <div className=\"control has-icons-left\">\n              <div className=\"select is-rounded\">\n                <select name=\"from\" onChange={fileType}>\n                  <option defaultValue>Original File Types</option>\n                  <option>PDF</option>\n                  <option>PNG</option>\n                  <option>JPEG/JPG</option>\n                  <option>WEBP</option>\n                  <option>ICO</option>\n                </select>\n              </div>\n              <div className=\"icon is-small is-left\">\n                <i className=\"fas fa-globe\"></i>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <p style={{ color: \"red\" }}>\n        *All Compression algo working except pdf compression*\n      </p>\n      <div className=\"level is-mobile\">\n        <div className=\"level-item has-text-centered\">\n          <div className=\"file is-dark has-name is-boxed\">\n            <label className=\"file-label\">\n              <input\n                className=\"file-input\"\n                type=\"file\"\n                name=\"image\"\n                accept=\"image/*\"\n                onChange={showName}\n              />\n              <span className=\"file-cta\">\n                <span className=\"file-icon\">\n                  <i className=\"fas fa-upload\"></i>\n                </span>\n                <span className=\"file-label\">Choose a file…</span>\n              </span>\n              <span className=\"file-name\">\n                {file === null ? null : file.name}\n              </span>\n            </label>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"level has-centered\">\n        {load ? (\n          <div className=\"columns level-item has-centered\">\n            <div className=\"column is-two-thirds\">\n              <progress className=\"progress is-dark\" max=\"100\">\n                30%\n              </progress>\n            </div>\n          </div>\n        ) : (\n          <div className=\"level-item has-centered\">\n            <button className=\"button is-dark is-rounded\" onClick={submit}>\n              <span className=\"icon\">\n                <i className=\"fas fa-dice-d20\"></i>\n              </span>\n              <span>Convert</span>\n            </button>\n          </div>\n        )}\n      </div>\n      <canvas\n        className=\"container has-centered\"\n        id=\"jpgtopng\"\n        style={{ display: \"none\" }}\n      ></canvas>\n      <div className=\"has-centered\">\n        {success ? (\n          <div className=\"has-centered\">\n            <div className=\"container level-item has-centered\">\n              <p>Your converted file is ready to download!</p>\n            </div>\n            <div className=\"container level-item has-centered\">\n              <p id=\"size\"></p>\n            </div>\n            <br />\n            <div className=\"container level-item has-centered\">\n              <a\n                onClick={download}\n                id=\"downloader\"\n                href=\"#i\"\n                className=\"button is-dark is-outlined\"\n              >\n                <span className=\"icon is-small\">\n                  <i className=\"fas fa-download\"></i>\n                </span>\n              </a>\n            </div>\n          </div>\n        ) : null}\n      </div>\n      <hr />\n    </section>\n  );\n};\n\nexport default Compression;\n","import imageCompression from \"browser-image-compression\";\nexport const PNG_JPG_Compressor = (file, setLoading, setSuccess) => {\n  let si = 1;\n  if (700 > file.size / 1024) {\n    si = 0.5;\n  }\n  if (10 > file.size / 1024) {\n    si = 0.01;\n  } else {\n    si = 1;\n  }\n  var options = {\n    maxSizeMB: si,\n    maxWidthOrHeight: 1920,\n    useWebWorker: true\n  };\n\n  imageCompression(file, options)\n    .then(function(compressedFile) {\n      let blob = compressedFile;\n      let reader = new FileReader();\n      reader.readAsDataURL(blob);\n      reader.onloadend = () => {\n        let dataURI = reader.result;\n        setLoading(false);\n        setSuccess(true);\n        document.getElementById(\"size\").innerText =\n          \"File Size: \" + (compressedFile.size / 1024).toFixed(2) + \"kb\";\n        document.getElementById(\"downloader\").download = file.name;\n        document.getElementById(\"downloader\").href = dataURI;\n      };\n    })\n    .catch(function(error) {\n      console.log(error.message);\n    });\n};\n","/**\n * Algorithm for JPG Compressor\n */\nexport const WEBPCompressor = dataURL => {\n  var canvas = document.getElementById(\"jpgtopng\");\n  var ctx = canvas.getContext(\"2d\");\n  var image = new Image();\n  ctx.canvas.width = window.innerWidth;\n  ctx.canvas.height = window.innerHeight;\n  image.onload = function() {\n    ctx.drawImage(image, 0, 0, window.innerWidth, window.innerHeight);\n  };\n  image.src = dataURL;\n  setTimeout(() => {\n    let dataURI = document\n      .getElementById(\"jpgtopng\")\n      .toDataURL(\"image/webp\", 0.03)\n      .replace(/^data:image\\/[^;]/, \"data:application/octet-stream\");\n    var head = \"data:image/webp;base64,\";\n    var imgFileSize =\n      Math.round(((dataURI.length - head.length) * 3) / 4) / 1024;\n    document.getElementById(\"size\").innerText =\n      \"File Size: \" + imgFileSize.toFixed(2) + \"kb\";\n  }, 3000);\n};\nexport const downloadWEBP = (name, setSucess) => {\n  //file name as argument\n  document.getElementById(\"downloader\").download = name + \".webp\";\n  // converting data uri to blob aken form github gist\n  let dataURI = document\n    .getElementById(\"jpgtopng\")\n    .toDataURL(\"image/webp\", 0.7)\n    .replace(/^data:image\\/[^;]/, \"data:application/octet-stream\");\n  let byteString = atob(dataURI.split(\",\")[1]);\n\n  // separate out the mime component\n  let mimeString = dataURI\n    .split(\",\")[0]\n    .split(\":\")[1]\n    .split(\";\")[0];\n\n  // write the bytes of the string to an ArrayBuffer\n  let arrayBuffer = new ArrayBuffer(byteString.length);\n  let _ia = new Uint8Array(arrayBuffer);\n  for (let i = 0; i < byteString.length; i++) {\n    _ia[i] = byteString.charCodeAt(i);\n  }\n\n  let dataView = new DataView(arrayBuffer);\n  let blob = new Blob([dataView], { type: mimeString });\n\n  document.getElementById(\"downloader\").href = URL.createObjectURL(blob);\n  setSucess(false);\n};\n","/**\n * Algorithm for PDF Compressor\n */\nimport jsPDF from \"jspdf\";\n\nexport const PDFCompressor = dataURL => {\n  console.log(dataURL);\n  var canvas = document.getElementById(\"jpgtopng\");\n  var ctx = canvas.getContext(\"2d\");\n  var image = new Image();\n  ctx.canvas.width = window.innerWidth;\n  ctx.canvas.height = window.innerHeight;\n  image.onload = function() {\n    ctx.drawImage(image, 0, 0, window.innerWidth, window.innerHeight);\n  };\n  image.src = dataURL;\n};\nexport const downloadPDF = name => {\n  //file name as argument\n  document.getElementById(\"downloader\").download = name + \".pdf\";\n  // converting data uri to blob aken form github gist\n  let dataURI = document\n    .getElementById(\"jpgtopng\")\n    .toDataURL(\"image/jpeg\", 0.3);\n  var doc = new jsPDF(\"p\", \"mm\", \"a4\", true);\n  doc.addImage(dataURI, \"JPEG\", 5, 0, 210, 297, undefined, \"FAST\");\n  doc.save(name + \".pdf\");\n};\n"],"sourceRoot":""}