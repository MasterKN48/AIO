{"version":3,"sources":["../../lib/utils.js","../../lib/image-compression.js","../../lib/web-worker.js","../../lib/index.js","component/Compression.js","component/Algorithms/compression/PNG_JPG_Compressor.js","component/Algorithms/compression/WEBPCompressor.js","component/Algorithms/compression/PDFCompressor.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["isBrowser","window","moduleMapper","getDataUrlFromFile","resolve","reader","dataurl","n","bstr","filename","file","canvas","view","length","offset","marker","maxWidthOrHeight","width","followExifOrientation","height","ctx","inc","drawFileInCanvas","exifOrientation","orientationFixedCanvas","options","imageCompressionLibUrl","cnt","script","generateLib","imageCompression","Compression","useState","setFile","success","setSuccess","load","setLoading","from","type","setType","className","name","onChange","e","target","value","defaultValue","accept","files","max","onClick","preventDefault","size","alert","toLowerCase","split","pop","si","maxSizeMB","useWebWorker","then","compressedFile","blob","FileReader","readAsDataURL","onloadend","dataURI","result","document","getElementById","innerText","toFixed","download","href","catch","error","console","log","message","PNG_JPG_Compressor","onload","dataURL","setSucess","getContext","image","Image","innerWidth","innerHeight","drawImage","src","toDataURL","replace","imgFileSize","Math","round","WEBPCompressor","readAsArrayBuffer","PDFCompressor","id","style","display","byteString","atob","mimeString","arrayBuffer","ArrayBuffer","_ia","Uint8Array","i","charCodeAt","dataView","DataView","Blob","URL","createObjectURL","downloadWEBP","_defineProperty","obj","key","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","_arrayLikeToArray","arr","len","arr2","Array","_slicedToArray","isArray","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","o","minLen","prototype","toString","call","slice","constructor","test","TypeError"],"mappings":"ozCAAA,IAAMA,EAA8B,oBAAlBC,2EAKoF,8BAQ5DC,4GAiBnC,SAASC,kCACPC,8CAEqBC,sMAiCdC,qCACK,gBAEjBC,EAAIC,6BAEJD,8DAUYE,EACdC,iBACAN,yzBAwC2CO,wYAoB7CC,gCAAMA,GAANA,gCAEMR,mCAGQS,6DAEgBC,8GASpBF,YAAgBE,0GAKPA,mCAGTC,qJA+BVC,yBAAEA,GAAFA,gCAAIA,IAAJA,cAAIA,EAAJA,sCAqBuBC,4CAQTN,EAAV,wBAEAA,qBASYO,qBACZC,qNAmBuCA,wJAI9B,yDAAAZ,GAAA,uBA8Bba,2BAHWD,+XC3OTE,uKAPK,mDAUGC,EAARZ,mHAUMa,sPAWAC,EAAwBC,wIAsB5Bd,+VAtB4Bc,gDAsB5Bd,6MAtB4Bc,aAsB5Bd,gOC/FJ,IACIe,IADAC,IAOFC,6qBCyDwBlB,gNDlD1B,WAASmB,4vDCkDiBnB,UDlDjBmB,sCAPPD,y1BAOOC,MCkDiBnB,ygBAa1BoB,EAAiBA,mBAAqB3B,EACtC2B,EAAiBA,mBAAjBA,EACAA,EAAiBA,UAAjBA,EACAA,EAAiBA,kBAAjBA,EACAA,EAAiBA,iBAAjBA,EAEAA,iBAxFAA,wHCuNeC,UA3MK,WAAO,IAAD,EACAC,mBAAS,MADT,mBACjBtB,EADiB,KACXuB,EADW,OAEMD,oBAAS,GAFf,mBAEjBE,EAFiB,KAERC,EAFQ,OAGGH,oBAAS,GAHZ,mBAGjBI,EAHiB,KAGXC,EAHW,OAIAL,mBAAS,CAC/BM,KAAM,KALgB,mBAIjBC,EAJiB,KAIXC,EAJW,KAoGxB,OACE,6BAASC,UAAU,aACjB,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,qBACb,4BAAQC,KAAK,OAAOC,SAjGjB,SAACC,GAEhBJ,EAAQ,eACHD,EADE,eAEJK,EAAEC,OAAOH,KAAOE,EAAEC,OAAOC,WA8Fd,4BAAQC,cAAY,GAApB,uBAEA,uCACA,4CACA,wCACA,yCAGJ,yBAAKN,UAAU,yBACb,uBAAGA,UAAU,sBAMvB,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,kCACb,2BAAOA,UAAU,cACf,2BACEA,UAAU,aACVF,KAAK,OACLG,KAAK,QACLM,OAAO,UACPL,SA7HG,SAACC,GAChBX,EAAQW,EAAEC,OAAOI,MAAM,OA8Hb,0BAAMR,UAAU,YACd,0BAAMA,UAAU,aACd,uBAAGA,UAAU,mBAEf,0BAAMA,UAAU,cAAhB,wBAEF,0BAAMA,UAAU,aACJ,OAAT/B,EAAgB,KAAOA,EAAKgC,UAOvC,yBAAKD,UAAU,sBACZL,EACC,yBAAKK,UAAU,mCACb,yBAAKA,UAAU,wBACb,8BAAUA,UAAU,mBAAmBS,IAAI,OAA3C,SAMJ,yBAAKT,UAAU,2BACb,4BAAQA,UAAU,4BAA4BU,QA9IzC,SAACP,GAEd,GADAA,EAAEQ,iBACW,OAAT1C,EAIJ,GAAIA,EAAK2C,KAAO,UACdC,MAAM,0CAGR,GAAkB,KAAdf,EAAKD,MAA6B,wBAAdC,EAAKD,KAA7B,CAIA,GAAIC,EAAKD,KAAKiB,gBAAkB7C,EAAKgC,KAAKc,MAAM,KAAKC,MAAO,CAC1D,GAAkB,aAAdlB,EAAKD,KAoBP,OANAgB,MACE,mCACE5C,EAAKgC,KAAKc,MAAM,KAAKC,MACrB,4BACAlB,EAAKD,KAAKiB,gBAEP,EAnBP,GACiC,QAA/B7C,EAAKgC,KAAKc,MAAM,KAAKC,OACU,SAA/B/C,EAAKgC,KAAKc,MAAM,KAAKC,MAQrB,OANAH,MACE,mCACE5C,EAAKgC,KAAKc,MAAM,KAAKC,MACrB,4BACAlB,EAAKD,KAAKiB,gBAEP,EA6Bb,GAjBApB,GAAW,GACXE,GAAW,GAUK,aAAdE,EAAKD,MACS,QAAdC,EAAKD,MACS,QAAdC,EAAKD,MC/EuB,SAAC5B,EAAM2B,EAAYF,GACnD,IAAIuB,EAAK,EACL,IAAMhD,EAAK2C,KAAO,OACpBK,EAAK,IAGLA,EADE,GAAKhD,EAAK2C,KAAO,KACd,IAEA,EAQPvB,EAAiBpB,EANH,CACZiD,UAAWD,EACX1C,iBAAkB,KAClB4C,cAAc,IAIbC,MAAK,SAASC,GACb,IAAIC,EAAOD,EACPzD,EAAS,IAAI2D,WACjB3D,EAAO4D,cAAcF,GACrB1D,EAAO6D,UAAY,WACjB,IAAIC,EAAU9D,EAAO+D,OACrB/B,GAAW,GACXF,GAAW,GACXkC,SAASC,eAAe,QAAQC,UAC9B,eAAiBT,EAAeT,KAAO,MAAMmB,QAAQ,GAAK,KAC5DH,SAASC,eAAe,cAAcG,SAAW/D,EAAKgC,KACtD2B,SAASC,eAAe,cAAcI,KAAOP,MAGhDQ,OAAM,SAASC,GACdC,QAAQC,IAAIF,EAAMG,YDiDlBC,CAAmBtE,EAAM2B,EAAYF,GAErB,SAAdI,EAAKD,KAAiB,CACxB,IAAIjC,EAAS,IAAI2D,WACjB3D,EAAO4D,cAAcvD,GACrBL,EAAO4E,OAAS,YEpFQ,SAACC,EAAS7C,EAAY8C,GAClD,IACI/D,EADSiD,SAASC,eAAe,YACpBc,WAAW,MACxBC,EAAQ,IAAIC,MAChBlE,EAAIT,OAAOM,MAAQhB,OAAOsF,WAC1BnE,EAAIT,OAAOQ,OAASlB,OAAOuF,YAC3BH,EAAMJ,OAAS,WACb7D,EAAIqE,UAAUJ,EAAO,EAAG,EAAGpF,OAAOsF,WAAYtF,OAAOuF,cAEvDH,EAAMK,IAAMR,EACZC,GAAU,GACV9C,GAAW,GACX,IAAI8B,EAAUE,SACXC,eAAe,YACfqB,UAAU,aAAc,KACxBC,QAAQ,oBAAqB,iCAE5BC,EAAcC,KAAKC,MAAwC,GAAhC5B,EAAQtD,OAD5B,0BAC0CA,QAAe,GAAK,KACzEwD,SAASC,eAAe,QAAQC,UAC9B,cAAgBsB,EAAYrB,QAAQ,GAAK,KFmErCwB,CADgB3F,EAAO+D,OACC/B,EAAYF,IAGxC,GAAkB,QAAdI,EAAKD,KAAgB,CACvB,IAAIjC,EAAS,IAAI2D,WACjB3D,EAAO4F,kBAAkBvF,GACzBL,EAAO4E,OAAS,YG3FO,SAAAC,GAC3BL,QAAQC,IAAII,GACZ,IACI9D,EADSiD,SAASC,eAAe,YACpBc,WAAW,MACxBC,EAAQ,IAAIC,MAChBlE,EAAIT,OAAOM,MAAQhB,OAAOsF,WAC1BnE,EAAIT,OAAOQ,OAASlB,OAAOuF,YAC3BH,EAAMJ,OAAS,WACb7D,EAAIqE,UAAUJ,EAAO,EAAG,EAAGpF,OAAOsF,WAAYtF,OAAOuF,cAEvDH,EAAMK,IAAMR,EHmFNgB,CADgB7F,EAAO+D,QAEvBjC,GAAW,GACXE,GAAW,UA3DbiB,MAAM,0CARNA,MAAM,wCA4IE,0BAAMb,UAAU,QACd,uBAAGA,UAAU,qBAEf,4CAKR,4BACEA,UAAU,yBACV0D,GAAG,WACHC,MAAO,CAAEC,QAAS,UAEpB,yBAAK5D,UAAU,gBACZP,EACC,yBAAKO,UAAU,gBACb,yBAAKA,UAAU,qCACb,yEAEF,yBAAKA,UAAU,qCACb,uBAAG0D,GAAG,UAER,6BACA,yBAAK1D,UAAU,qCACb,uBACEU,QA7FG,WGxFQ,IAAAT,EHyFL,SAAdH,EAAKD,MEjFe,SAACI,EAAMyC,GAEjCd,SAASC,eAAe,cAAcG,SAAW/B,EAAO,QAcxD,IAZA,IAAIyB,EAAUE,SACXC,eAAe,YACfqB,UAAU,aAAc,IACxBC,QAAQ,oBAAqB,iCAC5BU,EAAaC,KAAKpC,EAAQX,MAAM,KAAK,IAGrCgD,EAAarC,EAAQX,MAAM,KAAK,GAAGA,MAAM,KAAK,GAAGA,MAAM,KAAK,GAG5DiD,EAAc,IAAIC,YAAYJ,EAAWzF,QACzC8F,EAAM,IAAIC,WAAWH,GAChBI,EAAI,EAAGA,EAAIP,EAAWzF,OAAQgG,IACrCF,EAAIE,GAAKP,EAAWQ,WAAWD,GAGjC,IAAIE,EAAW,IAAIC,SAASP,GACxB1C,EAAO,IAAIkD,KAAK,CAACF,GAAW,CAAExE,KAAMiE,IAExCnC,SAASC,eAAe,cAAcI,KAAOwC,IAAIC,gBAAgBpD,GACjEoB,GAAU,GF0DNiC,CAAa1G,EAAKgC,KAAKc,MAAM,KAAK,GAAIrB,GAEtB,QAAdI,EAAKD,OG5FcI,EH6FThC,EAAKgC,KAAKc,MAAM,KAAK,GG3FrCa,SAASC,eAAe,cAAcG,SAAW/B,EAAO,SHoL1CyD,GAAG,aACHzB,KAAK,KACLjC,UAAU,8BAEV,0BAAMA,UAAU,iBACd,uBAAGA,UAAU,wBAKnB,MAEN,gC,gCIlNS,SAAS4E,EAAgBC,EAAKC,EAAKzE,GAYhD,OAXIyE,KAAOD,EACTE,OAAOC,eAAeH,EAAKC,EAAK,CAC9BzE,MAAOA,EACP4E,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZN,EAAIC,GAAOzE,EAGNwE,EAZT,mC,gCCAA,8CAEA,SAASO,EAAQC,EAAQC,GACvB,IAAIC,EAAOR,OAAOQ,KAAKF,GAEvB,GAAIN,OAAOS,sBAAuB,CAChC,IAAIC,EAAUV,OAAOS,sBAAsBH,GACvCC,IAAgBG,EAAUA,EAAQC,QAAO,SAAUC,GACrD,OAAOZ,OAAOa,yBAAyBP,EAAQM,GAAKV,eAEtDM,EAAKM,KAAKC,MAAMP,EAAME,GAGxB,OAAOF,EAGM,SAASQ,EAAe3F,GACrC,IAAK,IAAIgE,EAAI,EAAGA,EAAI4B,UAAU5H,OAAQgG,IAAK,CACzC,IAAI6B,EAAyB,MAAhBD,UAAU5B,GAAa4B,UAAU5B,GAAK,GAE/CA,EAAI,EACNgB,EAAQL,OAAOkB,IAAS,GAAMC,SAAQ,SAAUpB,GAC9C,YAAe1E,EAAQ0E,EAAKmB,EAAOnB,OAE5BC,OAAOoB,0BAChBpB,OAAOqB,iBAAiBhG,EAAQ2E,OAAOoB,0BAA0BF,IAEjEb,EAAQL,OAAOkB,IAASC,SAAQ,SAAUpB,GACxCC,OAAOC,eAAe5E,EAAQ0E,EAAKC,OAAOa,yBAAyBK,EAAQnB,OAKjF,OAAO1E,I,gCCjCM,SAASiG,EAAkBC,EAAKC,IAClC,MAAPA,GAAeA,EAAMD,EAAIlI,UAAQmI,EAAMD,EAAIlI,QAE/C,IAAK,IAAIgG,EAAI,EAAGoC,EAAO,IAAIC,MAAMF,GAAMnC,EAAImC,EAAKnC,IAC9CoC,EAAKpC,GAAKkC,EAAIlC,GAGhB,OAAOoC,ECHM,SAASE,EAAeJ,EAAKlC,GAC1C,OCLa,SAAyBkC,GACtC,GAAIG,MAAME,QAAQL,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKlC,GACjD,GAAsB,qBAAXwC,QAA4BA,OAAOC,YAAY9B,OAAOuB,GAAjE,CACA,IAAIQ,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKd,EAAIM,OAAOC,cAAmBE,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKjB,KAAKsB,EAAG9G,QAET+D,GAAK0C,EAAK1I,SAAWgG,GAH8C2C,GAAK,IAK9E,MAAOQ,GACPP,GAAK,EACLC,EAAKM,EACL,QACA,IACOR,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBR,EAAKlC,IGJ3C,SAAqCoD,EAAGC,GACrD,GAAKD,EAAL,CACA,GAAiB,kBAANA,EAAgB,OAAO,EAAiBA,EAAGC,GACtD,IAAI3J,EAAIiH,OAAO2C,UAAUC,SAASC,KAAKJ,GAAGK,MAAM,GAAI,GAEpD,MADU,WAAN/J,GAAkB0J,EAAEM,cAAahK,EAAI0J,EAAEM,YAAY7H,MAC7C,QAANnC,GAAqB,QAANA,EAAoB2I,MAAM5G,KAAK/B,GACxC,cAANA,GAAqB,2CAA2CiK,KAAKjK,GAAW,EAAiB0J,EAAGC,QAAxG,GHF8D,CAA2BnB,EAAKlC,IILjF,WACb,MAAM,IAAI4D,UAAU,6IJIgF,G","file":"static/js/6.02b51936.chunk.js","sourcesContent":["const isBrowser = typeof window !== 'undefined' // change browser environment to support SSR\n\n// add support for cordova-plugin-file\nconst moduleMapper = isBrowser && window.cordova && window.cordova.require && window.cordova.require('cordova/modulemapper')\nexport const CustomFile = isBrowser && ((moduleMapper && moduleMapper.getOriginalSymbol(window, 'File')) || File)\nexport const CustomFileReader = isBrowser && ((moduleMapper && moduleMapper.getOriginalSymbol(window, 'FileReader')) || FileReader)\n\n/**\n * getDataUrlFromFile\n *\n * @param {File} file\n * @returns {Promise<string>}\n */\nexport function getDataUrlFromFile (file) {\n  return new Promise((resolve, reject) => {\n    const reader = new CustomFileReader()\n    reader.onload = () => resolve(reader.result)\n    reader.onerror = (e) => reject(e)\n    reader.readAsDataURL(file)\n  })\n}\n\n/**\n * getFilefromDataUrl\n *\n * @param {string} dataurl\n * @param {string} filename\n * @param {number} [lastModified=Date.now()]\n * @returns {Promise<File|Blob>}\n */\nexport function getFilefromDataUrl (dataurl, filename, lastModified = Date.now()) {\n  return new Promise((resolve) => {\n    const arr = dataurl.split(',')\n    const mime = arr[0].match(/:(.*?);/)[1]\n    const bstr = atob(arr[1])\n    let n = bstr.length\n    const u8arr = new Uint8Array(n)\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n)\n    }\n    const file = new Blob([u8arr], { type: mime })\n    file.name = filename\n    file.lastModified = lastModified\n    resolve(file)\n\n    // Safari has issue with File constructor not being able to POST in FormData\n    // https://github.com/Donaldcwl/browser-image-compression/issues/8\n    // https://bugs.webkit.org/show_bug.cgi?id=165081\n    // let file\n    // try {\n    //   file = new File([u8arr], filename, { type: mime }) // Edge do not support File constructor\n    // } catch (e) {\n    //   file = new Blob([u8arr], { type: mime })\n    //   file.name = filename\n    //   file.lastModified = lastModified\n    // }\n    // resolve(file)\n  })\n}\n\n/**\n * loadImage\n *\n * @param {string} src\n * @returns {Promise<HTMLImageElement>}\n */\nexport function loadImage (src) {\n  return new Promise((resolve, reject) => {\n    const img = new Image()\n    img.onload = () => resolve(img)\n    img.onerror = (e) => reject(e)\n    img.src = src\n  })\n}\n\n/**\n * drawImageInCanvas\n *\n * @param {HTMLImageElement} img\n * @returns {HTMLCanvasElement}\n */\nexport function drawImageInCanvas (img) {\n  const [canvas, ctx] = getNewCanvasAndCtx(img.width, img.height)\n  ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n  return canvas\n}\n\n/**\n * drawFileInCanvas\n *\n * @param {File} file\n * @returns {Promise<[ImageBitmap | HTMLImageElement, HTMLCanvasElement]>}\n */\nexport async function drawFileInCanvas (file) {\n  let img\n  try {\n    img = await createImageBitmap(file)\n  } catch (e) {\n    const dataUrl = await getDataUrlFromFile(file)\n    img = await loadImage(dataUrl)\n  }\n  const canvas = drawImageInCanvas(img)\n  return [img, canvas]\n}\n\n/**\n * canvasToFile\n *\n * @param canvas\n * @param {string} fileType\n * @param {string} fileName\n * @param {number} fileLastModified\n * @param {number} [quality]\n * @returns {Promise<File|Blob>}\n */\nexport async function canvasToFile (canvas, fileType, fileName, fileLastModified, quality = 1) {\n  let file\n  if (typeof OffscreenCanvas === 'function' && canvas instanceof OffscreenCanvas) {\n    file = await canvas.convertToBlob({ type: fileType, quality })\n    file.name = fileName\n    file.lastModified = fileLastModified\n  } else {\n    const dataUrl = canvas.toDataURL(fileType, quality)\n    file = await getFilefromDataUrl(dataUrl, fileName, fileLastModified)\n  }\n  return file\n}\n\n/**\n * getExifOrientation\n * get image exif orientation info\n * source: https://stackoverflow.com/a/32490603/10395024\n *\n * @param {File} file\n * @returns {Promise<number>} - orientation id, see https://i.stack.imgur.com/VGsAj.gif\n */\nexport function getExifOrientation (file) {\n  return new Promise((resolve, reject) => {\n    const reader = new CustomFileReader()\n    reader.onload = (e) => {\n      const view = new DataView(e.target.result)\n      if (view.getUint16(0, false) != 0xFFD8) {\n        return resolve(-2)\n      }\n      const length = view.byteLength\n      let offset = 2\n      while (offset < length) {\n        if (view.getUint16(offset + 2, false) <= 8) return resolve(-1)\n        const marker = view.getUint16(offset, false)\n        offset += 2\n        if (marker == 0xFFE1) {\n          if (view.getUint32(offset += 2, false) != 0x45786966) {\n            return resolve(-1)\n          }\n\n          var little = view.getUint16(offset += 6, false) == 0x4949\n          offset += view.getUint32(offset + 4, little)\n          var tags = view.getUint16(offset, little)\n          offset += 2\n          for (var i = 0; i < tags; i++) {\n            if (view.getUint16(offset + (i * 12), little) == 0x0112) {\n              return resolve(view.getUint16(offset + (i * 12) + 8, little))\n            }\n          }\n        } else if ((marker & 0xFF00) != 0xFF00) {\n          break\n        } else {\n          offset += view.getUint16(offset, false)\n        }\n      }\n      return resolve(-1)\n    }\n    reader.onerror = (e) => reject(e)\n    reader.readAsArrayBuffer(file)\n  })\n}\n\n/**\n *\n * @param {HTMLCanvasElement} canvas\n * @param options\n * @returns {HTMLCanvasElement>}\n */\nexport function handleMaxWidthOrHeight (canvas, options) {\n  const width = canvas.width\n  const height = canvas.height\n  const maxWidthOrHeight = options.maxWidthOrHeight\n\n  const needToHandle = Number.isFinite(maxWidthOrHeight) && (width > maxWidthOrHeight || height > maxWidthOrHeight)\n\n  let newCanvas = canvas\n  let ctx\n\n  if (needToHandle) {\n    [newCanvas, ctx] = getNewCanvasAndCtx(width, height)\n    if (width > height) {\n      newCanvas.width = maxWidthOrHeight\n      newCanvas.height = (height / width) * maxWidthOrHeight\n    } else {\n      newCanvas.width = (width / height) * maxWidthOrHeight\n      newCanvas.height = maxWidthOrHeight\n    }\n    ctx.drawImage(canvas, 0, 0, newCanvas.width, newCanvas.height)\n\n    cleanupCanvasMemory(canvas)\n  }\n\n  return newCanvas\n}\n\n/**\n * followExifOrientation\n * source: https://stackoverflow.com/a/40867559/10395024\n *\n * @param {HTMLCanvasElement} canvas\n * @param {number} exifOrientation\n * @returns {HTMLCanvasElement} canvas\n */\nexport function followExifOrientation (canvas, exifOrientation) {\n  const width = canvas.width\n  const height = canvas.height\n\n  const [newCanvas, ctx] = getNewCanvasAndCtx(width, height)\n\n  // set proper canvas dimensions before transform & export\n  if (4 < exifOrientation && exifOrientation < 9) {\n    newCanvas.width = height\n    newCanvas.height = width\n  } else {\n    newCanvas.width = width\n    newCanvas.height = height\n  }\n\n  // transform context before drawing image\n  switch (exifOrientation) {\n    case 2: ctx.transform(-1, 0, 0, 1, width, 0); break;\n    case 3: ctx.transform(-1, 0, 0, -1, width, height); break;\n    case 4: ctx.transform(1, 0, 0, -1, 0, height); break;\n    case 5: ctx.transform(0, 1, 1, 0, 0, 0); break;\n    case 6: ctx.transform(0, 1, -1, 0, height, 0); break;\n    case 7: ctx.transform(0, -1, -1, 0, height, width); break;\n    case 8: ctx.transform(0, -1, 1, 0, 0, width); break;\n    default: break;\n  }\n\n  ctx.drawImage(canvas, 0, 0, width, height)\n\n  cleanupCanvasMemory(canvas)\n\n  return newCanvas\n}\n\n/**\n * get new Canvas and it's context\n * @param width\n * @param height\n * @returns {[HTMLCanvasElement, CanvasRenderingContext2D]}\n */\nexport function getNewCanvasAndCtx (width, height) {\n  let canvas\n  let ctx\n  try {\n    canvas = new OffscreenCanvas(width, height)\n    ctx = canvas.getContext('2d')\n    if (ctx === null) {\n      throw new Error('getContext of OffscreenCanvas returns null')\n    }\n  } catch (e) {\n    canvas = document.createElement('canvas')\n    ctx = canvas.getContext('2d')\n  }\n  canvas.width = width\n  canvas.height = height\n  return [canvas, ctx]\n}\n\n/**\n * clear Canvas memory\n * @param canvas\n * @returns null\n */\nexport function cleanupCanvasMemory (canvas) {\n  canvas.width = 0\n  canvas.height = 0\n}\n\nif (isBrowser) {\n// Polyfill for Number.isInteger\n  Number.isInteger = Number.isInteger || function (value) {\n    return typeof value === 'number' &&\n      isFinite(value) &&\n      Math.floor(value) === value\n  }\n}\n","import {\n  canvasToFile,\n  cleanupCanvasMemory,\n  drawFileInCanvas,\n  followExifOrientation,\n  getExifOrientation,\n  getNewCanvasAndCtx,\n  handleMaxWidthOrHeight\n} from './utils'\n\n/**\n * Compress an image file.\n *\n * @param {File} file\n * @param {Object} options - { maxSizeMB=Number.POSITIVE_INFINITY, maxWidthOrHeight, useWebWorker=false, maxIteration = 10, exifOrientation, fileType }\n * @param {number} [options.maxSizeMB=Number.POSITIVE_INFINITY]\n * @param {number} [options.maxWidthOrHeight=undefined]\n * @param {number} [options.maxIteration=10]\n * @param {number} [options.exifOrientation] - default to be the exif orientation from the image file\n * @param {Function} [options.onProgress] - a function takes one progress argument (progress from 0 to 100)\n * @param {string} [options.fileType] - default to be the original mime type from the image file\n * @returns {Promise<File | Blob>}\n */\nexport default async function compress (file, options) {\n  let progress = 0\n\n  function incProgress (inc = 5) {\n    progress += inc\n    if (typeof options.onProgress === 'function') {\n      options.onProgress(Math.min(progress, 100))\n    }\n  }\n\n  function setProgress (p) {\n    progress = Math.min(Math.max(p, progress), 100)\n    if (typeof options.onProgress === 'function') {\n      options.onProgress(progress)\n    }\n  }\n\n  let remainingTrials = options.maxIteration || 10\n\n  const maxSizeByte = options.maxSizeMB * 1024 * 1024\n\n  incProgress()\n\n  // drawFileInCanvas\n  let [img, origCanvas] = await drawFileInCanvas(file)\n\n  incProgress()\n\n  // handleMaxWidthOrHeight\n  const maxWidthOrHeightFixedCanvas = handleMaxWidthOrHeight(origCanvas, options)\n\n  incProgress()\n\n  // exifOrientation\n  options.exifOrientation = options.exifOrientation || await getExifOrientation(file)\n  incProgress()\n  const orientationFixedCanvas = followExifOrientation(maxWidthOrHeightFixedCanvas, options.exifOrientation)\n  incProgress()\n\n  let quality = 1\n\n  let tempFile = await canvasToFile(orientationFixedCanvas, options.fileType || file.type, file.name, file.lastModified, quality)\n  incProgress()\n\n  const origExceedMaxSize = tempFile.size > maxSizeByte\n  const sizeBecomeLarger = tempFile.size > file.size\n\n  // check if we need to compress or resize\n  if (!origExceedMaxSize && !sizeBecomeLarger) {\n    // no need to compress\n    setProgress(100)\n    return tempFile\n  }\n\n  const sourceSize = file.size\n  const renderedSize = tempFile.size\n  let currentSize = renderedSize\n  let compressedFile\n  let newCanvas, ctx\n  let canvas = orientationFixedCanvas\n  while (remainingTrials-- && (currentSize > maxSizeByte || currentSize > sourceSize)) {\n    const newWidth = origExceedMaxSize ? canvas.width * 0.95 : canvas.width\n    const newHeight = origExceedMaxSize ? canvas.height * 0.95 : canvas.height;\n    [newCanvas, ctx] = getNewCanvasAndCtx(newWidth, newHeight)\n\n    ctx.drawImage(canvas, 0, 0, newWidth, newHeight)\n\n    if (file.type === 'image/jpeg') {\n      quality *= 0.95\n    }\n    compressedFile = await canvasToFile(newCanvas, options.fileType || file.type, file.name, file.lastModified, quality)\n\n    cleanupCanvasMemory(canvas)\n\n    canvas = newCanvas\n\n    currentSize = compressedFile.size\n    setProgress(Math.min(99, Math.floor((renderedSize - currentSize) / (renderedSize - maxSizeByte) * 100)))\n  }\n\n  // garbage clean canvas for safari\n  // ref: https://bugs.webkit.org/show_bug.cgi?id=195325\n  cleanupCanvasMemory(canvas)\n  cleanupCanvasMemory(newCanvas)\n  cleanupCanvasMemory(maxWidthOrHeightFixedCanvas)\n  cleanupCanvasMemory(orientationFixedCanvas)\n  cleanupCanvasMemory(origCanvas)\n\n  setProgress(100)\n  return compressedFile\n}\n","import lib from './index'\nimport compress from './image-compression'\nimport { getNewCanvasAndCtx } from './utils'\n\nlet cnt = 0\nlet imageCompressionLibUrl\nlet worker\n\nfunction createWorker (script) {\n  if (typeof script === 'function') {\n    script = `(${f})()`\n  }\n  return new Worker(URL.createObjectURL(new Blob([script])))\n}\n\nfunction createSourceObject (str) {\n  return URL.createObjectURL(new Blob([str], { type: 'application/javascript' }))\n}\n\nfunction generateLib () {\n  // prepare the lib to be used inside WebWorker\n  return createSourceObject(`\n    function imageCompression (){return (${lib}).apply(null, arguments)}\n\n    imageCompression.getDataUrlFromFile = ${lib.getDataUrlFromFile}\n    imageCompression.getFilefromDataUrl = ${lib.getFilefromDataUrl}\n    imageCompression.loadImage = ${lib.loadImage}\n    imageCompression.drawImageInCanvas = ${lib.drawImageInCanvas}\n    imageCompression.drawFileInCanvas = ${lib.drawFileInCanvas}\n    imageCompression.canvasToFile = ${lib.canvasToFile}\n    imageCompression.getExifOrientation = ${lib.getExifOrientation}\n    imageCompression.handleMaxWidthOrHeight = ${lib.handleMaxWidthOrHeight}\n    imageCompression.followExifOrientation = ${lib.followExifOrientation}\n    imageCompression.cleanupMemory = ${lib.cleanupMemory}\n\n    getDataUrlFromFile = imageCompression.getDataUrlFromFile\n    getFilefromDataUrl = imageCompression.getFilefromDataUrl\n    loadImage = imageCompression.loadImage\n    drawImageInCanvas = imageCompression.drawImageInCanvas\n    drawFileInCanvas = imageCompression.drawFileInCanvas\n    canvasToFile = imageCompression.canvasToFile\n    getExifOrientation = imageCompression.getExifOrientation\n    handleMaxWidthOrHeight = imageCompression.handleMaxWidthOrHeight\n    followExifOrientation = imageCompression.followExifOrientation\n    cleanupMemory = imageCompression.cleanupMemory\n\n    getNewCanvasAndCtx = ${getNewCanvasAndCtx}\n    \n    CustomFileReader = FileReader\n    \n    CustomFile = File\n    \n    function _slicedToArray(arr, n) { return arr }\n    \n    function _typeof(a) { return typeof a }\n\n    function compress (){return (${compress}).apply(null, arguments)}\n    `)\n}\n\nfunction generateWorkerScript () {\n  // code to be run in the WebWorker\n  return createWorker(`\n    let scriptImported = false\n    self.addEventListener('message', async (e) => {\n      const { file, id, imageCompressionLibUrl, options } = e.data\n      options.onProgress = (progress) => self.postMessage({ progress, id })\n      try {\n        if (!scriptImported) {\n          // console.log('[worker] importScripts', imageCompressionLibUrl)\n          self.importScripts(imageCompressionLibUrl)\n          scriptImported = true\n        }\n        // console.log('[worker] self', self)\n        const compressedFile = await imageCompression(file, options)\n        self.postMessage({ file: compressedFile, id })\n      } catch (e) {\n        // console.error('[worker] error', e)\n        self.postMessage({ error: e.message + '\\\\n' + e.stack, id })\n      }\n    })\n  `)\n}\n\nexport function compressOnWebWorker (file, options) {\n  return new Promise(async (resolve, reject) => {\n    let id = cnt++\n\n    if (!imageCompressionLibUrl) {\n      imageCompressionLibUrl = generateLib()\n    }\n\n    if (!worker) {\n      worker = generateWorkerScript()\n    }\n\n    function handler (e) {\n      if (e.data.id === id) {\n        if (e.data.progress !== undefined && e.data.progress < 100) {\n          options.onProgress(e.data.progress)\n          return\n        }\n        worker.removeEventListener('message', handler)\n        if (e.data.error) {\n          reject(new Error(e.data.error))\n        }\n        resolve(e.data.file)\n      }\n    }\n\n    worker.addEventListener('message', handler)\n    worker.postMessage({\n      file,\n      id,\n      imageCompressionLibUrl,\n      options: { ...options, onProgress: undefined }\n    })\n  })\n}\n","import compress from './image-compression'\nimport {\n  canvasToFile,\n  drawFileInCanvas,\n  drawImageInCanvas,\n  getDataUrlFromFile,\n  getFilefromDataUrl,\n  loadImage,\n  getExifOrientation,\n  handleMaxWidthOrHeight,\n  followExifOrientation,\n  CustomFile,\n  cleanupCanvasMemory\n} from './utils'\nimport { compressOnWebWorker } from './web-worker'\n\n/**\n * Compress an image file.\n *\n * @param {File} file\n * @param {Object} options - { maxSizeMB=Number.POSITIVE_INFINITY, maxWidthOrHeight, useWebWorker=false, maxIteration = 10, exifOrientation, fileType }\n * @param {number} [options.maxSizeMB=Number.POSITIVE_INFINITY]\n * @param {number} [options.maxWidthOrHeight=undefined]\n * @param {boolean} [options.useWebWorker=false]\n * @param {number} [options.maxIteration=10]\n * @param {number} [options.exifOrientation] - default to be the exif orientation from the image file\n * @param {Function} [options.onProgress] - a function takes one progress argument (progress from 0 to 100)\n * @param {string} [options.fileType] - default to be the original mime type from the image file\n * @returns {Promise<File | Blob>}\n */\nasync function imageCompression (file, options) {\n\n  let compressedFile\n\n  options.maxSizeMB = options.maxSizeMB || Number.POSITIVE_INFINITY\n  const useWebWorker = typeof options.useWebWorker === 'boolean' ? options.useWebWorker : false\n  delete options.useWebWorker\n\n  if (!(file instanceof Blob || file instanceof CustomFile)) {\n    throw new Error('The file given is not an instance of Blob or File')\n  } else if (!/^image/.test(file.type)) {\n    throw new Error('The file given is not an image')\n  }\n\n  // try run in web worker, fall back to run in main thread\n  const inWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope\n\n  // if ((useWebWorker && typeof Worker === 'function') || inWebWorker) {\n  //   console.log('run compression in web worker')\n  // } else {\n  //   console.log('run compression in main thread')\n  // }\n\n  if (useWebWorker && typeof Worker === 'function' && !inWebWorker) {\n    try {\n      // console.log(1)\n      // \"compressOnWebWorker\" is kind of like a recursion to call \"imageCompression\" again inside web worker\n      compressedFile = await compressOnWebWorker(file, options)\n    } catch (e) {\n      // console.warn('Run compression in web worker failed:', e, ', fall back to main thread')\n      // console.log(1.5)\n      compressedFile = await compress(file, options)\n    }\n  } else {\n    // console.log(2)\n    compressedFile = await compress(file, options)\n  }\n\n  try {\n    compressedFile.name = file.name\n    compressedFile.lastModified = file.lastModified\n  } catch (e) {}\n\n  return compressedFile\n}\n\nimageCompression.getDataUrlFromFile = getDataUrlFromFile\nimageCompression.getFilefromDataUrl = getFilefromDataUrl\nimageCompression.loadImage = loadImage\nimageCompression.drawImageInCanvas = drawImageInCanvas\nimageCompression.drawFileInCanvas = drawFileInCanvas\nimageCompression.canvasToFile = canvasToFile\nimageCompression.getExifOrientation = getExifOrientation\nimageCompression.handleMaxWidthOrHeight = handleMaxWidthOrHeight\nimageCompression.followExifOrientation = followExifOrientation\nimageCompression.cleanupMemory = cleanupCanvasMemory\nimageCompression.version = '1.0.9'\n\nexport default imageCompression\n","import React, { useState } from \"react\";\n// import { JPGCompressor, downloadJPG } from \"./Algorithms/JPGCompressor\";\n// import { PNGCompressor, downloadPNG } from \"./Algorithms/PNGCompressor\";\nimport {\n  downloadWEBP,\n  WEBPCompressor,\n} from \"./Algorithms/compression/WEBPCompressor\";\nimport {\n  PDFCompressor,\n  downloadPDF,\n} from \"./Algorithms/compression/PDFCompressor\";\nimport { PNG_JPG_Compressor } from \"./Algorithms/compression/PNG_JPG_Compressor\";\nconst Compression = () => {\n  const [file, setFile] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [load, setLoading] = useState(false);\n  const [type, setType] = useState({\n    from: \"\",\n  });\n  const showName = (e) => {\n    setFile(e.target.files[0]);\n  };\n  const fileType = (e) => {\n    //console.log(e.target.value);\n    setType({\n      ...type,\n      [e.target.name]: e.target.value,\n    });\n  };\n  const submit = (e) => {\n    e.preventDefault();\n    if (file === null) {\n      alert(\"Please first select file and types\");\n      return;\n    }\n    if (file.size > 112582912) {\n      alert(\"File Size must be less then 11mb.\");\n      return;\n    }\n    if (type.from === \"\" || type.from === \"Original File Types\") {\n      alert(\"'From' file type is not selected!\");\n      return;\n    }\n    if (type.from.toLowerCase() !== file.name.split(\".\").pop()) {\n      if (type.from === \"JPEG/JPG\") {\n        if (\n          file.name.split(\".\").pop() !== \"jpg\" &&\n          file.name.split(\".\").pop() !== \"jpeg\"\n        ) {\n          alert(\n            \"Mismatch in selected file type: \" +\n              file.name.split(\".\").pop() +\n              \" with 'From' Select box: \" +\n              type.from.toLowerCase()\n          );\n          return false;\n        }\n      } else {\n        alert(\n          \"Mismatch in selected file type: \" +\n            file.name.split(\".\").pop() +\n            \" with 'From' Select box: \" +\n            type.from.toLowerCase()\n        );\n        return false;\n      }\n    }\n    setSuccess(false);\n    setLoading(true);\n    // if (type.from === \"JPG\" || type.from === \"JPEG\") {\n    //   let reader = new FileReader();\n    //   reader.readAsDataURL(file);\n    //   reader.onload = function() {\n    //     const dataURL = reader.result;\n    //     JPGCompressor(dataURL);\n    //   };\n    // }\n    if (\n      type.from === \"JPEG/JPG\" ||\n      type.from === \"PNG\" ||\n      type.from === \"ICO\"\n    ) {\n      PNG_JPG_Compressor(file, setLoading, setSuccess);\n    }\n    if (type.from === \"WEBP\") {\n      let reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = function () {\n        const dataURL = reader.result;\n        WEBPCompressor(dataURL, setLoading, setSuccess);\n      };\n    }\n    if (type.from === \"PDF\") {\n      let reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onload = function () {\n        const dataURL = reader.result;\n        PDFCompressor(dataURL);\n        setSuccess(true);\n        setLoading(false);\n      };\n    }\n  };\n  //handle download accordingly\n  const download = () => {\n    if (type.from === \"WEBP\") {\n      downloadWEBP(file.name.split(\".\")[0], setSuccess); //passing file name\n    }\n    if (type.from === \"PDF\") {\n      downloadPDF(file.name.split(\".\")[0], setSuccess); //passing file name\n    }\n  };\n  return (\n    <section className=\"container\">\n      <div className=\"level is-mobile\">\n        <div className=\"level-item has-text-centered\">\n          <div className=\"field\">\n            <div className=\"control has-icons-left\">\n              <div className=\"select is-rounded\">\n                <select name=\"from\" onChange={fileType}>\n                  <option defaultValue>Original File Types</option>\n                  {/* <option>PDF</option> */}\n                  <option>PNG</option>\n                  <option>JPEG/JPG</option>\n                  <option>WEBP</option>\n                  <option>ICO</option>\n                </select>\n              </div>\n              <div className=\"icon is-small is-left\">\n                <i className=\"fas fa-globe\"></i>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"level is-mobile\">\n        <div className=\"level-item has-text-centered\">\n          <div className=\"file is-dark has-name is-boxed\">\n            <label className=\"file-label\">\n              <input\n                className=\"file-input\"\n                type=\"file\"\n                name=\"image\"\n                accept=\"image/*\"\n                onChange={showName}\n              />\n              <span className=\"file-cta\">\n                <span className=\"file-icon\">\n                  <i className=\"fas fa-upload\"></i>\n                </span>\n                <span className=\"file-label\">Choose a file…</span>\n              </span>\n              <span className=\"file-name\">\n                {file === null ? null : file.name}\n              </span>\n            </label>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"level has-centered\">\n        {load ? (\n          <div className=\"columns level-item has-centered\">\n            <div className=\"column is-two-thirds\">\n              <progress className=\"progress is-dark\" max=\"100\">\n                30%\n              </progress>\n            </div>\n          </div>\n        ) : (\n          <div className=\"level-item has-centered\">\n            <button className=\"button is-dark is-rounded\" onClick={submit}>\n              <span className=\"icon\">\n                <i className=\"fas fa-dice-d20\"></i>\n              </span>\n              <span>Convert</span>\n            </button>\n          </div>\n        )}\n      </div>\n      <canvas\n        className=\"container has-centered\"\n        id=\"jpgtopng\"\n        style={{ display: \"none\" }}\n      ></canvas>\n      <div className=\"has-centered\">\n        {success ? (\n          <div className=\"has-centered\">\n            <div className=\"container level-item has-centered\">\n              <p>Your converted file is ready to download!</p>\n            </div>\n            <div className=\"container level-item has-centered\">\n              <p id=\"size\"></p>\n            </div>\n            <br />\n            <div className=\"container level-item has-centered\">\n              <a\n                onClick={download}\n                id=\"downloader\"\n                href=\"#i\"\n                className=\"button is-dark is-outlined\"\n              >\n                <span className=\"icon is-small\">\n                  <i className=\"fas fa-download\"></i>\n                </span>\n              </a>\n            </div>\n          </div>\n        ) : null}\n      </div>\n      <hr />\n    </section>\n  );\n};\n\nexport default Compression;\n","import imageCompression from \"browser-image-compression\";\nexport const PNG_JPG_Compressor = (file, setLoading, setSuccess) => {\n  let si = 1;\n  if (700 > file.size / 1024) {\n    si = 0.5;\n  }\n  if (10 > file.size / 1024) {\n    si = 0.01;\n  } else {\n    si = 1;\n  }\n  var options = {\n    maxSizeMB: si,\n    maxWidthOrHeight: 1920,\n    useWebWorker: true\n  };\n\n  imageCompression(file, options)\n    .then(function(compressedFile) {\n      let blob = compressedFile;\n      let reader = new FileReader();\n      reader.readAsDataURL(blob);\n      reader.onloadend = () => {\n        let dataURI = reader.result;\n        setLoading(false);\n        setSuccess(true);\n        document.getElementById(\"size\").innerText =\n          \"File Size: \" + (compressedFile.size / 1024).toFixed(2) + \"kb\";\n        document.getElementById(\"downloader\").download = file.name;\n        document.getElementById(\"downloader\").href = dataURI;\n      };\n    })\n    .catch(function(error) {\n      console.log(error.message);\n    });\n};\n","/**\n * Algorithm for JPG Compressor\n */\nexport const WEBPCompressor = (dataURL, setLoading, setSucess) => {\n  var canvas = document.getElementById(\"jpgtopng\");\n  var ctx = canvas.getContext(\"2d\");\n  var image = new Image();\n  ctx.canvas.width = window.innerWidth;\n  ctx.canvas.height = window.innerHeight;\n  image.onload = function () {\n    ctx.drawImage(image, 0, 0, window.innerWidth, window.innerHeight);\n  };\n  image.src = dataURL;\n  setSucess(true);\n  setLoading(false);\n  let dataURI = document\n    .getElementById(\"jpgtopng\")\n    .toDataURL(\"image/webp\", 0.03)\n    .replace(/^data:image\\/[^;]/, \"data:application/octet-stream\");\n  var head = \"data:image/webp;base64,\";\n  var imgFileSize = Math.round(((dataURI.length - head.length) * 3) / 4) / 1024;\n  document.getElementById(\"size\").innerText =\n    \"File Size: \" + imgFileSize.toFixed(2) + \"kb\";\n};\nexport const downloadWEBP = (name, setSucess) => {\n  //file name as argument\n  document.getElementById(\"downloader\").download = name + \".webp\";\n  // converting data uri to blob aken form github gist\n  let dataURI = document\n    .getElementById(\"jpgtopng\")\n    .toDataURL(\"image/webp\", 0.7)\n    .replace(/^data:image\\/[^;]/, \"data:application/octet-stream\");\n  let byteString = atob(dataURI.split(\",\")[1]);\n\n  // separate out the mime component\n  let mimeString = dataURI.split(\",\")[0].split(\":\")[1].split(\";\")[0];\n\n  // write the bytes of the string to an ArrayBuffer\n  let arrayBuffer = new ArrayBuffer(byteString.length);\n  let _ia = new Uint8Array(arrayBuffer);\n  for (let i = 0; i < byteString.length; i++) {\n    _ia[i] = byteString.charCodeAt(i);\n  }\n\n  let dataView = new DataView(arrayBuffer);\n  let blob = new Blob([dataView], { type: mimeString });\n\n  document.getElementById(\"downloader\").href = URL.createObjectURL(blob);\n  setSucess(false);\n};\n","/**\n * Algorithm for PDF Compressor\n */\n\nexport const PDFCompressor = dataURL => {\n  console.log(dataURL);\n  var canvas = document.getElementById(\"jpgtopng\");\n  var ctx = canvas.getContext(\"2d\");\n  var image = new Image();\n  ctx.canvas.width = window.innerWidth;\n  ctx.canvas.height = window.innerHeight;\n  image.onload = function() {\n    ctx.drawImage(image, 0, 0, window.innerWidth, window.innerHeight);\n  };\n  image.src = dataURL;\n};\nexport const downloadPDF = name => {\n  //file name as argument\n  document.getElementById(\"downloader\").download = name + \".pdf\";\n  // converting data uri to blob aken form github gist\n  //   let dataURI = document\n  //     .getElementById(\"jpgtopng\")\n  //     .toDataURL(\"image/jpeg\", 0.3);\n};\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}